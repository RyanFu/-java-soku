package com.youku.search.console.pojo;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;



            

/**
 * ???¡Â????
 *
 * This class was autogenerated by Torque on:
 *
 * [Thu Nov 25 11:54:15 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to SearchLog
 */
public abstract class BaseSearchLog extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1290657255312L;

    /** The Peer class */
    private static final SearchLogPeer peer =
        new SearchLogPeer();

        
    /** The value for the id field */
    private int id;
      
    /** The value for the words field */
    private String words;
      
    /** The value for the url field */
    private String url;
                                          
    /** The value for the stop field */
    private int stop = 0;
      
    /** The value for the searchTime field */
    private String searchTime;
      
    /** The value for the updateTime field */
    private Date updateTime;
  
            
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                        
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) 
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Words
     *
     * @return String
     */
    public String getWords()
    {
        return words;
    }

                        
    /**
     * Set the value of Words
     *
     * @param v new value
     */
    public void setWords(String v) 
    {
    
                  if (!ObjectUtils.equals(this.words, v))
              {
            this.words = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Url
     *
     * @return String
     */
    public String getUrl()
    {
        return url;
    }

                        
    /**
     * Set the value of Url
     *
     * @param v new value
     */
    public void setUrl(String v) 
    {
    
                  if (!ObjectUtils.equals(this.url, v))
              {
            this.url = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Stop
     *
     * @return int
     */
    public int getStop()
    {
        return stop;
    }

                        
    /**
     * Set the value of Stop
     *
     * @param v new value
     */
    public void setStop(int v) 
    {
    
                  if (this.stop != v)
              {
            this.stop = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the SearchTime
     *
     * @return String
     */
    public String getSearchTime()
    {
        return searchTime;
    }

                        
    /**
     * Set the value of SearchTime
     *
     * @param v new value
     */
    public void setSearchTime(String v) 
    {
    
                  if (!ObjectUtils.equals(this.searchTime, v))
              {
            this.searchTime = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the UpdateTime
     *
     * @return Date
     */
    public Date getUpdateTime()
    {
        return updateTime;
    }

                        
    /**
     * Set the value of UpdateTime
     *
     * @param v new value
     */
    public void setUpdateTime(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.updateTime, v))
              {
            this.updateTime = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList<String>();
              fieldNames.add("Id");
              fieldNames.add("Words");
              fieldNames.add("Url");
              fieldNames.add("Stop");
              fieldNames.add("SearchTime");
              fieldNames.add("UpdateTime");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("Words"))
        {
                return getWords();
            }
          if (name.equals("Url"))
        {
                return getUrl();
            }
          if (name.equals("Stop"))
        {
                return new Integer(getStop());
            }
          if (name.equals("SearchTime"))
        {
                return getSearchTime();
            }
          if (name.equals("UpdateTime"))
        {
                return getUpdateTime();
            }
          return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
          if (name.equals("Id"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setId(((Integer) value).intValue());
                      return true;
        }
          if (name.equals("Words"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setWords((String) value);
                      return true;
        }
          if (name.equals("Url"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setUrl((String) value);
                      return true;
        }
          if (name.equals("Stop"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setStop(((Integer) value).intValue());
                      return true;
        }
          if (name.equals("SearchTime"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSearchTime((String) value);
                      return true;
        }
          if (name.equals("UpdateTime"))
        {
                      // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setUpdateTime((Date) value);
                      return true;
        }
          return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(SearchLogPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(SearchLogPeer.WORDS))
        {
                return getWords();
            }
          if (name.equals(SearchLogPeer.URL))
        {
                return getUrl();
            }
          if (name.equals(SearchLogPeer.STOP))
        {
                return new Integer(getStop());
            }
          if (name.equals(SearchLogPeer.SEARCH_TIME))
        {
                return getSearchTime();
            }
          if (name.equals(SearchLogPeer.UPDATE_TIME))
        {
                return getUpdateTime();
            }
          return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (SearchLogPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
        if (SearchLogPeer.WORDS.equals(name))
        {
            return setByName("Words", value);
        }
        if (SearchLogPeer.URL.equals(name))
        {
            return setByName("Url", value);
        }
        if (SearchLogPeer.STOP.equals(name))
        {
            return setByName("Stop", value);
        }
        if (SearchLogPeer.SEARCH_TIME.equals(name))
        {
            return setByName("SearchTime", value);
        }
        if (SearchLogPeer.UPDATE_TIME.equals(name))
        {
            return setByName("UpdateTime", value);
        }
          return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getWords();
            }
              if (pos == 2)
        {
                return getUrl();
            }
              if (pos == 3)
        {
                return new Integer(getStop());
            }
              if (pos == 4)
        {
                return getSearchTime();
            }
              if (pos == 5)
        {
                return getUpdateTime();
            }
              return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("Id", value);
        }
          if (position == 1)
        {
            return setByName("Words", value);
        }
          if (position == 2)
        {
            return setByName("Url", value);
        }
          if (position == 3)
        {
            return setByName("Stop", value);
        }
          if (position == 4)
        {
            return setByName("SearchTime", value);
        }
          if (position == 5)
        {
            return setByName("UpdateTime", value);
        }
              return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(SearchLogPeer.DATABASE_NAME);
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    SearchLogPeer.doInsert((SearchLog) this, con);
                    setNew(false);
                }
                else
                {
                    SearchLogPeer.doUpdate((SearchLog) this, con);
                }
                }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public SearchLog copy() throws TorqueException
    {
            return copy(true);
        }
  
          /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public SearchLog copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new SearchLog(), deepcopy);
    }
      
      /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     * @param copyObj the object to fill.
     */
    protected SearchLog copyInto(SearchLog copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }
      
    /**
     * Fills the copyObj with the contents of this object.
       * If deepcopy is true, The associated objects are also copied 
     * and treated as new objects.
       * @param copyObj the object to fill.
       * @param deepcopy whether the associated objects should be copied.
       */
      protected SearchLog copyInto(SearchLog copyObj, boolean deepcopy) throws TorqueException
      {
          copyObj.setId(id);
          copyObj.setWords(words);
          copyObj.setUrl(url);
          copyObj.setStop(stop);
          copyObj.setSearchTime(searchTime);
          copyObj.setUpdateTime(updateTime);
  
                            copyObj.setId( 0);
                                          
          if (deepcopy) 
        {
            }
          return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SearchLogPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return SearchLogPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("SearchLog:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("Words = ")
               .append(getWords())
             .append("\n");
        str.append("Url = ")
               .append(getUrl())
             .append("\n");
        str.append("Stop = ")
               .append(getStop())
             .append("\n");
        str.append("SearchTime = ")
               .append(getSearchTime())
             .append("\n");
        str.append("UpdateTime = ")
               .append(getUpdateTime())
             .append("\n");
        return(str.toString());
    }
}
