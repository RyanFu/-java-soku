package com.youku.search.console.pojo;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;



      

/**
 * ????б└ик
 *
 * This class was autogenerated by Torque on:
 *
 * [Fri Jun 12 09:58:42 CST 2009]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Role
 */
public abstract class BaseRole extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1244771922000L;

    /** The Peer class */
    private static final RolePeer peer =
        new RolePeer();

        
    /** The value for the id field */
    private int id;
      
    /** The value for the name field */
    private String name;
      
    /** The value for the description field */
    private String description;
  
            
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                                              
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) throws TorqueException
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
                                  
                  // update associated UserRole
        if (collUserRoles != null)
        {
            for (int i = 0; i < collUserRoles.size(); i++)
            {
                ((UserRole) collUserRoles.get(i))
                        .setRoleId(v);
            }
        }
                                                    
                  // update associated RoleMenu
        if (collRoleMenus != null)
        {
            for (int i = 0; i < collRoleMenus.size(); i++)
            {
                ((RoleMenu) collRoleMenus.get(i))
                        .setRoleId(v);
            }
        }
                                }
          
    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }

                        
    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.name, v))
              {
            this.name = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Description
     *
     * @return String
     */
    public String getDescription()
    {
        return description;
    }

                        
    /**
     * Set the value of Description
     *
     * @param v new value
     */
    public void setDescription(String v) 
    {
    
                  if (!ObjectUtils.equals(this.description, v))
              {
            this.description = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
          /**
     * Collection to store aggregation of collUserRoles
     */
    protected List<UserRole> collUserRoles;

    /**
     * Temporary storage of collUserRoles to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUserRoles()
    {
        if (collUserRoles == null)
        {
            collUserRoles = new ArrayList<UserRole>();
        }
    }

        
    /**
     * Method called to associate a UserRole object to this object
     * through the UserRole foreign key attribute
     *
     * @param l UserRole
     * @throws TorqueException
     */
    public void addUserRole(UserRole l) throws TorqueException
    {
        getUserRoles().add(l);
        l.setRole((Role) this);
    }

    /**
     * The criteria used to select the current contents of collUserRoles
     */
    private Criteria lastUserRolesCriteria = null;
      
    /**
                   * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserRoles(new Criteria())
                   *
     * @return the collection of associated objects
           * @throws TorqueException
           */
    public List<UserRole> getUserRoles()
              throws TorqueException
          {
                      if (collUserRoles == null)
        {
            collUserRoles = getUserRoles(new Criteria(10));
        }
                return collUserRoles;
          }

    /**
           * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role has previously
           * been saved, it will retrieve related UserRoles from storage.
     * If this Role is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<UserRole> getUserRoles(Criteria criteria) throws TorqueException
    {
              if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList<UserRole>();
            }
            else
            {
                        criteria.add(UserRolePeer.ROLE_ID, getId() );
                        collUserRoles = UserRolePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(UserRolePeer.ROLE_ID, getId());
                            if (!lastUserRolesCriteria.equals(criteria))
                {
                    collUserRoles = UserRolePeer.doSelect(criteria);
                }
            }
        }
        lastUserRolesCriteria = criteria;

        return collUserRoles;
          }

    /**
           * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserRoles(new Criteria(),Connection)
           * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UserRole> getUserRoles(Connection con) throws TorqueException
    {
              if (collUserRoles == null)
        {
            collUserRoles = getUserRoles(new Criteria(10), con);
        }
        return collUserRoles;
          }

    /**
           * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role has previously
           * been saved, it will retrieve related UserRoles from storage.
     * If this Role is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UserRole> getUserRoles(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList<UserRole>();
            }
            else
            {
                         criteria.add(UserRolePeer.ROLE_ID, getId());
                         collUserRoles = UserRolePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                             criteria.add(UserRolePeer.ROLE_ID, getId());
                             if (!lastUserRolesCriteria.equals(criteria))
                 {
                     collUserRoles = UserRolePeer.doSelect(criteria, con);
                 }
             }
         }
         lastUserRolesCriteria = criteria;

         return collUserRoles;
           }

                        
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
                 * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role is new, it will return
                 * an empty collection; or if this Role has previously
     * been saved, it will retrieve related UserRoles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Role.
     */
    protected List<UserRole> getUserRolesJoinUser(Criteria criteria)
        throws TorqueException
    {
                    if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList<UserRole>();
            }
            else
            {
                              criteria.add(UserRolePeer.ROLE_ID, getId());
                              collUserRoles = UserRolePeer.doSelectJoinUser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
                                    criteria.add(UserRolePeer.ROLE_ID, getId());
                                    if (!lastUserRolesCriteria.equals(criteria))
            {
                collUserRoles = UserRolePeer.doSelectJoinUser(criteria);
            }
        }
        lastUserRolesCriteria = criteria;

        return collUserRoles;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
                 * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role is new, it will return
                 * an empty collection; or if this Role has previously
     * been saved, it will retrieve related UserRoles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Role.
     */
    protected List<UserRole> getUserRolesJoinRole(Criteria criteria)
        throws TorqueException
    {
                    if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList<UserRole>();
            }
            else
            {
                              criteria.add(UserRolePeer.ROLE_ID, getId());
                              collUserRoles = UserRolePeer.doSelectJoinRole(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
                                    criteria.add(UserRolePeer.ROLE_ID, getId());
                                    if (!lastUserRolesCriteria.equals(criteria))
            {
                collUserRoles = UserRolePeer.doSelectJoinRole(criteria);
            }
        }
        lastUserRolesCriteria = criteria;

        return collUserRoles;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collRoleMenus
     */
    protected List<RoleMenu> collRoleMenus;

    /**
     * Temporary storage of collRoleMenus to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRoleMenus()
    {
        if (collRoleMenus == null)
        {
            collRoleMenus = new ArrayList<RoleMenu>();
        }
    }

        
    /**
     * Method called to associate a RoleMenu object to this object
     * through the RoleMenu foreign key attribute
     *
     * @param l RoleMenu
     * @throws TorqueException
     */
    public void addRoleMenu(RoleMenu l) throws TorqueException
    {
        getRoleMenus().add(l);
        l.setRole((Role) this);
    }

    /**
     * The criteria used to select the current contents of collRoleMenus
     */
    private Criteria lastRoleMenusCriteria = null;
      
    /**
                   * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRoleMenus(new Criteria())
                   *
     * @return the collection of associated objects
           * @throws TorqueException
           */
    public List<RoleMenu> getRoleMenus()
              throws TorqueException
          {
                      if (collRoleMenus == null)
        {
            collRoleMenus = getRoleMenus(new Criteria(10));
        }
                return collRoleMenus;
          }

    /**
           * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role has previously
           * been saved, it will retrieve related RoleMenus from storage.
     * If this Role is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<RoleMenu> getRoleMenus(Criteria criteria) throws TorqueException
    {
              if (collRoleMenus == null)
        {
            if (isNew())
            {
               collRoleMenus = new ArrayList<RoleMenu>();
            }
            else
            {
                        criteria.add(RoleMenuPeer.ROLE_ID, getId() );
                        collRoleMenus = RoleMenuPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(RoleMenuPeer.ROLE_ID, getId());
                            if (!lastRoleMenusCriteria.equals(criteria))
                {
                    collRoleMenus = RoleMenuPeer.doSelect(criteria);
                }
            }
        }
        lastRoleMenusCriteria = criteria;

        return collRoleMenus;
          }

    /**
           * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRoleMenus(new Criteria(),Connection)
           * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RoleMenu> getRoleMenus(Connection con) throws TorqueException
    {
              if (collRoleMenus == null)
        {
            collRoleMenus = getRoleMenus(new Criteria(10), con);
        }
        return collRoleMenus;
          }

    /**
           * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role has previously
           * been saved, it will retrieve related RoleMenus from storage.
     * If this Role is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RoleMenu> getRoleMenus(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collRoleMenus == null)
        {
            if (isNew())
            {
               collRoleMenus = new ArrayList<RoleMenu>();
            }
            else
            {
                         criteria.add(RoleMenuPeer.ROLE_ID, getId());
                         collRoleMenus = RoleMenuPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                             criteria.add(RoleMenuPeer.ROLE_ID, getId());
                             if (!lastRoleMenusCriteria.equals(criteria))
                 {
                     collRoleMenus = RoleMenuPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRoleMenusCriteria = criteria;

         return collRoleMenus;
           }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
                 * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role is new, it will return
                 * an empty collection; or if this Role has previously
     * been saved, it will retrieve related RoleMenus from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Role.
     */
    protected List<RoleMenu> getRoleMenusJoinRole(Criteria criteria)
        throws TorqueException
    {
                    if (collRoleMenus == null)
        {
            if (isNew())
            {
               collRoleMenus = new ArrayList<RoleMenu>();
            }
            else
            {
                              criteria.add(RoleMenuPeer.ROLE_ID, getId());
                              collRoleMenus = RoleMenuPeer.doSelectJoinRole(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
                                    criteria.add(RoleMenuPeer.ROLE_ID, getId());
                                    if (!lastRoleMenusCriteria.equals(criteria))
            {
                collRoleMenus = RoleMenuPeer.doSelectJoinRole(criteria);
            }
        }
        lastRoleMenusCriteria = criteria;

        return collRoleMenus;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
                 * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Role is new, it will return
                 * an empty collection; or if this Role has previously
     * been saved, it will retrieve related RoleMenus from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Role.
     */
    protected List<RoleMenu> getRoleMenusJoinMenu(Criteria criteria)
        throws TorqueException
    {
                    if (collRoleMenus == null)
        {
            if (isNew())
            {
               collRoleMenus = new ArrayList<RoleMenu>();
            }
            else
            {
                              criteria.add(RoleMenuPeer.ROLE_ID, getId());
                              collRoleMenus = RoleMenuPeer.doSelectJoinMenu(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
                                    criteria.add(RoleMenuPeer.ROLE_ID, getId());
                                    if (!lastRoleMenusCriteria.equals(criteria))
            {
                collRoleMenus = RoleMenuPeer.doSelectJoinMenu(criteria);
            }
        }
        lastRoleMenusCriteria = criteria;

        return collRoleMenus;
                }
                            


          
    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList<String>();
              fieldNames.add("Id");
              fieldNames.add("Name");
              fieldNames.add("Description");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("Name"))
        {
                return getName();
            }
          if (name.equals("Description"))
        {
                return getDescription();
            }
          return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
          if (name.equals("Id"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setId(((Integer) value).intValue());
                      return true;
        }
          if (name.equals("Name"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
                      return true;
        }
          if (name.equals("Description"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDescription((String) value);
                      return true;
        }
          return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(RolePeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(RolePeer.NAME))
        {
                return getName();
            }
          if (name.equals(RolePeer.DESCRIPTION))
        {
                return getDescription();
            }
          return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (RolePeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
        if (RolePeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
        if (RolePeer.DESCRIPTION.equals(name))
        {
            return setByName("Description", value);
        }
          return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getName();
            }
              if (pos == 2)
        {
                return getDescription();
            }
              return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("Id", value);
        }
          if (position == 1)
        {
            return setByName("Name", value);
        }
          if (position == 2)
        {
            return setByName("Description", value);
        }
              return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(RolePeer.DATABASE_NAME);
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    RolePeer.doInsert((Role) this, con);
                    setNew(false);
                }
                else
                {
                    RolePeer.doUpdate((Role) this, con);
                }
                }

                                      
                                    if (collUserRoles != null)
            {
                for (int i = 0; i < collUserRoles.size(); i++)
                {
                    ((UserRole) collUserRoles.get(i)).save(con);
                }
            }
                                                  
                                    if (collRoleMenus != null)
            {
                for (int i = 0; i < collRoleMenus.size(); i++)
                {
                    ((RoleMenu) collRoleMenus.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Role copy() throws TorqueException
    {
            return copy(true);
        }
  
          /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Role copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Role(), deepcopy);
    }
      
      /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     * @param copyObj the object to fill.
     */
    protected Role copyInto(Role copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }
      
    /**
     * Fills the copyObj with the contents of this object.
       * If deepcopy is true, The associated objects are also copied 
     * and treated as new objects.
       * @param copyObj the object to fill.
       * @param deepcopy whether the associated objects should be copied.
       */
      protected Role copyInto(Role copyObj, boolean deepcopy) throws TorqueException
      {
          copyObj.setId(id);
          copyObj.setName(name);
          copyObj.setDescription(description);
  
                            copyObj.setId( 0);
                        
          if (deepcopy) 
        {
                                    
                            
        List<UserRole> vUserRoles = getUserRoles();
                            if (vUserRoles != null)
        {
            for (int i = 0; i < vUserRoles.size(); i++)
            {
                UserRole obj =  vUserRoles.get(i);
                copyObj.addUserRole(obj.copy());
            }
        }
        else
        {
            copyObj.collUserRoles = null;
        }
                                                  
                            
        List<RoleMenu> vRoleMenus = getRoleMenus();
                            if (vRoleMenus != null)
        {
            for (int i = 0; i < vRoleMenus.size(); i++)
            {
                RoleMenu obj =  vRoleMenus.get(i);
                copyObj.addRoleMenu(obj.copy());
            }
        }
        else
        {
            copyObj.collRoleMenus = null;
        }
                          }
          return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public RolePeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return RolePeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Role:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("Name = ")
               .append(getName())
             .append("\n");
        str.append("Description = ")
               .append(getDescription())
             .append("\n");
        return(str.toString());
    }
}
