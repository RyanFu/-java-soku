package com.youku.soku.library.load;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * MUSICè¡¨
 *
 * This class was autogenerated by Torque on:
 *
 * [Sat Apr 23 11:09:17 CST 2011]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Music
 */
public abstract class BaseMusic extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1303528157948L;

    /** The Peer class */
    private static final MusicPeer peer =
        new MusicPeer();


    /** The value for the id field */
    private int id;

    /** The value for the contentId field */
    private int contentId;

    /** The value for the name field */
    private String name;

    /** The value for the logo field */
    private String logo;

    /** The value for the cates field */
    private String cates;

    /** The value for the types field */
    private String types;

    /** The value for the area field */
    private String area;

    /** The value for the language field */
    private String language;

    /** The value for the releaseTime field */
    private String releaseTime;

    /** The value for the releaseYear field */
    private int releaseYear;

    /** The value for the firstletter field */
    private String firstletter;

    /** The value for the brief field */
    private String brief;

    /** The value for the copyrightStatus field */
    private String copyrightStatus;

    /** The value for the paid field */
    private int paid = 0;

    /** The value for the seconds field */
    private double seconds;

    /** The value for the blocked field */
    private int blocked = 0;

    /** The value for the orderId field */
    private int orderId;

    /** The value for the viewUrl field */
    private String viewUrl;

    /** The value for the detailUrl field */
    private String detailUrl;

    /** The value for the source field */
    private int source = 0;

    /** The value for the searchkeys field */
    private String searchkeys;

    /** The value for the haibao field */
    private String haibao;

    /** The value for the flag field */
    private int flag = 0;

    /** The value for the updateTime field */
    private Date updateTime;

    /** The value for the createTime field */
    private Date createTime;


    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) 
    {

        if (this.id != v)
        {
            this.id = v;
            setModified(true);
        }


    }

    /**
     * Get the ContentId
     *
     * @return int
     */
    public int getContentId()
    {
        return contentId;
    }


    /**
     * Set the value of ContentId
     *
     * @param v new value
     */
    public void setContentId(int v) 
    {

        if (this.contentId != v)
        {
            this.contentId = v;
            setModified(true);
        }


    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Logo
     *
     * @return String
     */
    public String getLogo()
    {
        return logo;
    }


    /**
     * Set the value of Logo
     *
     * @param v new value
     */
    public void setLogo(String v) 
    {

        if (!ObjectUtils.equals(this.logo, v))
        {
            this.logo = v;
            setModified(true);
        }


    }

    /**
     * Get the Cates
     *
     * @return String
     */
    public String getCates()
    {
        return cates;
    }


    /**
     * Set the value of Cates
     *
     * @param v new value
     */
    public void setCates(String v) 
    {

        if (!ObjectUtils.equals(this.cates, v))
        {
            this.cates = v;
            setModified(true);
        }


    }

    /**
     * Get the Types
     *
     * @return String
     */
    public String getTypes()
    {
        return types;
    }


    /**
     * Set the value of Types
     *
     * @param v new value
     */
    public void setTypes(String v) 
    {

        if (!ObjectUtils.equals(this.types, v))
        {
            this.types = v;
            setModified(true);
        }


    }

    /**
     * Get the Area
     *
     * @return String
     */
    public String getArea()
    {
        return area;
    }


    /**
     * Set the value of Area
     *
     * @param v new value
     */
    public void setArea(String v) 
    {

        if (!ObjectUtils.equals(this.area, v))
        {
            this.area = v;
            setModified(true);
        }


    }

    /**
     * Get the Language
     *
     * @return String
     */
    public String getLanguage()
    {
        return language;
    }


    /**
     * Set the value of Language
     *
     * @param v new value
     */
    public void setLanguage(String v) 
    {

        if (!ObjectUtils.equals(this.language, v))
        {
            this.language = v;
            setModified(true);
        }


    }

    /**
     * Get the ReleaseTime
     *
     * @return String
     */
    public String getReleaseTime()
    {
        return releaseTime;
    }


    /**
     * Set the value of ReleaseTime
     *
     * @param v new value
     */
    public void setReleaseTime(String v) 
    {

        if (!ObjectUtils.equals(this.releaseTime, v))
        {
            this.releaseTime = v;
            setModified(true);
        }


    }

    /**
     * Get the ReleaseYear
     *
     * @return int
     */
    public int getReleaseYear()
    {
        return releaseYear;
    }


    /**
     * Set the value of ReleaseYear
     *
     * @param v new value
     */
    public void setReleaseYear(int v) 
    {

        if (this.releaseYear != v)
        {
            this.releaseYear = v;
            setModified(true);
        }


    }

    /**
     * Get the Firstletter
     *
     * @return String
     */
    public String getFirstletter()
    {
        return firstletter;
    }


    /**
     * Set the value of Firstletter
     *
     * @param v new value
     */
    public void setFirstletter(String v) 
    {

        if (!ObjectUtils.equals(this.firstletter, v))
        {
            this.firstletter = v;
            setModified(true);
        }


    }

    /**
     * Get the Brief
     *
     * @return String
     */
    public String getBrief()
    {
        return brief;
    }


    /**
     * Set the value of Brief
     *
     * @param v new value
     */
    public void setBrief(String v) 
    {

        if (!ObjectUtils.equals(this.brief, v))
        {
            this.brief = v;
            setModified(true);
        }


    }

    /**
     * Get the CopyrightStatus
     *
     * @return String
     */
    public String getCopyrightStatus()
    {
        return copyrightStatus;
    }


    /**
     * Set the value of CopyrightStatus
     *
     * @param v new value
     */
    public void setCopyrightStatus(String v) 
    {

        if (!ObjectUtils.equals(this.copyrightStatus, v))
        {
            this.copyrightStatus = v;
            setModified(true);
        }


    }

    /**
     * Get the Paid
     *
     * @return int
     */
    public int getPaid()
    {
        return paid;
    }


    /**
     * Set the value of Paid
     *
     * @param v new value
     */
    public void setPaid(int v) 
    {

        if (this.paid != v)
        {
            this.paid = v;
            setModified(true);
        }


    }

    /**
     * Get the Seconds
     *
     * @return double
     */
    public double getSeconds()
    {
        return seconds;
    }


    /**
     * Set the value of Seconds
     *
     * @param v new value
     */
    public void setSeconds(double v) 
    {

        if (this.seconds != v)
        {
            this.seconds = v;
            setModified(true);
        }


    }

    /**
     * Get the Blocked
     *
     * @return int
     */
    public int getBlocked()
    {
        return blocked;
    }


    /**
     * Set the value of Blocked
     *
     * @param v new value
     */
    public void setBlocked(int v) 
    {

        if (this.blocked != v)
        {
            this.blocked = v;
            setModified(true);
        }


    }

    /**
     * Get the OrderId
     *
     * @return int
     */
    public int getOrderId()
    {
        return orderId;
    }


    /**
     * Set the value of OrderId
     *
     * @param v new value
     */
    public void setOrderId(int v) 
    {

        if (this.orderId != v)
        {
            this.orderId = v;
            setModified(true);
        }


    }

    /**
     * Get the ViewUrl
     *
     * @return String
     */
    public String getViewUrl()
    {
        return viewUrl;
    }


    /**
     * Set the value of ViewUrl
     *
     * @param v new value
     */
    public void setViewUrl(String v) 
    {

        if (!ObjectUtils.equals(this.viewUrl, v))
        {
            this.viewUrl = v;
            setModified(true);
        }


    }

    /**
     * Get the DetailUrl
     *
     * @return String
     */
    public String getDetailUrl()
    {
        return detailUrl;
    }


    /**
     * Set the value of DetailUrl
     *
     * @param v new value
     */
    public void setDetailUrl(String v) 
    {

        if (!ObjectUtils.equals(this.detailUrl, v))
        {
            this.detailUrl = v;
            setModified(true);
        }


    }

    /**
     * Get the Source
     *
     * @return int
     */
    public int getSource()
    {
        return source;
    }


    /**
     * Set the value of Source
     *
     * @param v new value
     */
    public void setSource(int v) 
    {

        if (this.source != v)
        {
            this.source = v;
            setModified(true);
        }


    }

    /**
     * Get the Searchkeys
     *
     * @return String
     */
    public String getSearchkeys()
    {
        return searchkeys;
    }


    /**
     * Set the value of Searchkeys
     *
     * @param v new value
     */
    public void setSearchkeys(String v) 
    {

        if (!ObjectUtils.equals(this.searchkeys, v))
        {
            this.searchkeys = v;
            setModified(true);
        }


    }

    /**
     * Get the Haibao
     *
     * @return String
     */
    public String getHaibao()
    {
        return haibao;
    }


    /**
     * Set the value of Haibao
     *
     * @param v new value
     */
    public void setHaibao(String v) 
    {

        if (!ObjectUtils.equals(this.haibao, v))
        {
            this.haibao = v;
            setModified(true);
        }


    }

    /**
     * Get the Flag
     *
     * @return int
     */
    public int getFlag()
    {
        return flag;
    }


    /**
     * Set the value of Flag
     *
     * @param v new value
     */
    public void setFlag(int v) 
    {

        if (this.flag != v)
        {
            this.flag = v;
            setModified(true);
        }


    }

    /**
     * Get the UpdateTime
     *
     * @return Date
     */
    public Date getUpdateTime()
    {
        return updateTime;
    }


    /**
     * Set the value of UpdateTime
     *
     * @param v new value
     */
    public void setUpdateTime(Date v) 
    {

        if (!ObjectUtils.equals(this.updateTime, v))
        {
            this.updateTime = v;
            setModified(true);
        }


    }

    /**
     * Get the CreateTime
     *
     * @return Date
     */
    public Date getCreateTime()
    {
        return createTime;
    }


    /**
     * Set the value of CreateTime
     *
     * @param v new value
     */
    public void setCreateTime(Date v) 
    {

        if (!ObjectUtils.equals(this.createTime, v))
        {
            this.createTime = v;
            setModified(true);
        }


    }

       
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("ContentId");
            fieldNames.add("Name");
            fieldNames.add("Logo");
            fieldNames.add("Cates");
            fieldNames.add("Types");
            fieldNames.add("Area");
            fieldNames.add("Language");
            fieldNames.add("ReleaseTime");
            fieldNames.add("ReleaseYear");
            fieldNames.add("Firstletter");
            fieldNames.add("Brief");
            fieldNames.add("CopyrightStatus");
            fieldNames.add("Paid");
            fieldNames.add("Seconds");
            fieldNames.add("Blocked");
            fieldNames.add("OrderId");
            fieldNames.add("ViewUrl");
            fieldNames.add("DetailUrl");
            fieldNames.add("Source");
            fieldNames.add("Searchkeys");
            fieldNames.add("Haibao");
            fieldNames.add("Flag");
            fieldNames.add("UpdateTime");
            fieldNames.add("CreateTime");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return new Integer(getId());
        }
        if (name.equals("ContentId"))
        {
            return new Integer(getContentId());
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Logo"))
        {
            return getLogo();
        }
        if (name.equals("Cates"))
        {
            return getCates();
        }
        if (name.equals("Types"))
        {
            return getTypes();
        }
        if (name.equals("Area"))
        {
            return getArea();
        }
        if (name.equals("Language"))
        {
            return getLanguage();
        }
        if (name.equals("ReleaseTime"))
        {
            return getReleaseTime();
        }
        if (name.equals("ReleaseYear"))
        {
            return new Integer(getReleaseYear());
        }
        if (name.equals("Firstletter"))
        {
            return getFirstletter();
        }
        if (name.equals("Brief"))
        {
            return getBrief();
        }
        if (name.equals("CopyrightStatus"))
        {
            return getCopyrightStatus();
        }
        if (name.equals("Paid"))
        {
            return new Integer(getPaid());
        }
        if (name.equals("Seconds"))
        {
            return new Double(getSeconds());
        }
        if (name.equals("Blocked"))
        {
            return new Integer(getBlocked());
        }
        if (name.equals("OrderId"))
        {
            return new Integer(getOrderId());
        }
        if (name.equals("ViewUrl"))
        {
            return getViewUrl();
        }
        if (name.equals("DetailUrl"))
        {
            return getDetailUrl();
        }
        if (name.equals("Source"))
        {
            return new Integer(getSource());
        }
        if (name.equals("Searchkeys"))
        {
            return getSearchkeys();
        }
        if (name.equals("Haibao"))
        {
            return getHaibao();
        }
        if (name.equals("Flag"))
        {
            return new Integer(getFlag());
        }
        if (name.equals("UpdateTime"))
        {
            return getUpdateTime();
        }
        if (name.equals("CreateTime"))
        {
            return getCreateTime();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("ContentId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setContentId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Logo"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setLogo((String) value);
            return true;
        }
        if (name.equals("Cates"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCates((String) value);
            return true;
        }
        if (name.equals("Types"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setTypes((String) value);
            return true;
        }
        if (name.equals("Area"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setArea((String) value);
            return true;
        }
        if (name.equals("Language"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setLanguage((String) value);
            return true;
        }
        if (name.equals("ReleaseTime"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setReleaseTime((String) value);
            return true;
        }
        if (name.equals("ReleaseYear"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setReleaseYear(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Firstletter"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setFirstletter((String) value);
            return true;
        }
        if (name.equals("Brief"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setBrief((String) value);
            return true;
        }
        if (name.equals("CopyrightStatus"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCopyrightStatus((String) value);
            return true;
        }
        if (name.equals("Paid"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setPaid(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Seconds"))
        {
            if (value == null || ! (Double.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not a Double object.");
            }
            setSeconds(((Double) value).doubleValue());
            return true;
        }
        if (name.equals("Blocked"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setBlocked(((Integer) value).intValue());
            return true;
        }
        if (name.equals("OrderId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setOrderId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("ViewUrl"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setViewUrl((String) value);
            return true;
        }
        if (name.equals("DetailUrl"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDetailUrl((String) value);
            return true;
        }
        if (name.equals("Source"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setSource(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Searchkeys"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSearchkeys((String) value);
            return true;
        }
        if (name.equals("Haibao"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setHaibao((String) value);
            return true;
        }
        if (name.equals("Flag"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setFlag(((Integer) value).intValue());
            return true;
        }
        if (name.equals("UpdateTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setUpdateTime((Date) value);
            return true;
        }
        if (name.equals("CreateTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreateTime((Date) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(MusicPeer.ID))
        {
            return new Integer(getId());
        }
        if (name.equals(MusicPeer.CONTENT_ID))
        {
            return new Integer(getContentId());
        }
        if (name.equals(MusicPeer.NAME))
        {
            return getName();
        }
        if (name.equals(MusicPeer.LOGO))
        {
            return getLogo();
        }
        if (name.equals(MusicPeer.CATES))
        {
            return getCates();
        }
        if (name.equals(MusicPeer.TYPES))
        {
            return getTypes();
        }
        if (name.equals(MusicPeer.AREA))
        {
            return getArea();
        }
        if (name.equals(MusicPeer.LANGUAGE))
        {
            return getLanguage();
        }
        if (name.equals(MusicPeer.RELEASE_TIME))
        {
            return getReleaseTime();
        }
        if (name.equals(MusicPeer.RELEASE_YEAR))
        {
            return new Integer(getReleaseYear());
        }
        if (name.equals(MusicPeer.FIRSTLETTER))
        {
            return getFirstletter();
        }
        if (name.equals(MusicPeer.BRIEF))
        {
            return getBrief();
        }
        if (name.equals(MusicPeer.COPYRIGHT_STATUS))
        {
            return getCopyrightStatus();
        }
        if (name.equals(MusicPeer.PAID))
        {
            return new Integer(getPaid());
        }
        if (name.equals(MusicPeer.SECONDS))
        {
            return new Double(getSeconds());
        }
        if (name.equals(MusicPeer.BLOCKED))
        {
            return new Integer(getBlocked());
        }
        if (name.equals(MusicPeer.ORDER_ID))
        {
            return new Integer(getOrderId());
        }
        if (name.equals(MusicPeer.VIEW_URL))
        {
            return getViewUrl();
        }
        if (name.equals(MusicPeer.DETAIL_URL))
        {
            return getDetailUrl();
        }
        if (name.equals(MusicPeer.SOURCE))
        {
            return new Integer(getSource());
        }
        if (name.equals(MusicPeer.SEARCHKEYS))
        {
            return getSearchkeys();
        }
        if (name.equals(MusicPeer.HAIBAO))
        {
            return getHaibao();
        }
        if (name.equals(MusicPeer.FLAG))
        {
            return new Integer(getFlag());
        }
        if (name.equals(MusicPeer.UPDATE_TIME))
        {
            return getUpdateTime();
        }
        if (name.equals(MusicPeer.CREATE_TIME))
        {
            return getCreateTime();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (MusicPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (MusicPeer.CONTENT_ID.equals(name))
        {
            return setByName("ContentId", value);
        }
      if (MusicPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (MusicPeer.LOGO.equals(name))
        {
            return setByName("Logo", value);
        }
      if (MusicPeer.CATES.equals(name))
        {
            return setByName("Cates", value);
        }
      if (MusicPeer.TYPES.equals(name))
        {
            return setByName("Types", value);
        }
      if (MusicPeer.AREA.equals(name))
        {
            return setByName("Area", value);
        }
      if (MusicPeer.LANGUAGE.equals(name))
        {
            return setByName("Language", value);
        }
      if (MusicPeer.RELEASE_TIME.equals(name))
        {
            return setByName("ReleaseTime", value);
        }
      if (MusicPeer.RELEASE_YEAR.equals(name))
        {
            return setByName("ReleaseYear", value);
        }
      if (MusicPeer.FIRSTLETTER.equals(name))
        {
            return setByName("Firstletter", value);
        }
      if (MusicPeer.BRIEF.equals(name))
        {
            return setByName("Brief", value);
        }
      if (MusicPeer.COPYRIGHT_STATUS.equals(name))
        {
            return setByName("CopyrightStatus", value);
        }
      if (MusicPeer.PAID.equals(name))
        {
            return setByName("Paid", value);
        }
      if (MusicPeer.SECONDS.equals(name))
        {
            return setByName("Seconds", value);
        }
      if (MusicPeer.BLOCKED.equals(name))
        {
            return setByName("Blocked", value);
        }
      if (MusicPeer.ORDER_ID.equals(name))
        {
            return setByName("OrderId", value);
        }
      if (MusicPeer.VIEW_URL.equals(name))
        {
            return setByName("ViewUrl", value);
        }
      if (MusicPeer.DETAIL_URL.equals(name))
        {
            return setByName("DetailUrl", value);
        }
      if (MusicPeer.SOURCE.equals(name))
        {
            return setByName("Source", value);
        }
      if (MusicPeer.SEARCHKEYS.equals(name))
        {
            return setByName("Searchkeys", value);
        }
      if (MusicPeer.HAIBAO.equals(name))
        {
            return setByName("Haibao", value);
        }
      if (MusicPeer.FLAG.equals(name))
        {
            return setByName("Flag", value);
        }
      if (MusicPeer.UPDATE_TIME.equals(name))
        {
            return setByName("UpdateTime", value);
        }
      if (MusicPeer.CREATE_TIME.equals(name))
        {
            return setByName("CreateTime", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Integer(getId());
        }
        if (pos == 1)
        {
            return new Integer(getContentId());
        }
        if (pos == 2)
        {
            return getName();
        }
        if (pos == 3)
        {
            return getLogo();
        }
        if (pos == 4)
        {
            return getCates();
        }
        if (pos == 5)
        {
            return getTypes();
        }
        if (pos == 6)
        {
            return getArea();
        }
        if (pos == 7)
        {
            return getLanguage();
        }
        if (pos == 8)
        {
            return getReleaseTime();
        }
        if (pos == 9)
        {
            return new Integer(getReleaseYear());
        }
        if (pos == 10)
        {
            return getFirstletter();
        }
        if (pos == 11)
        {
            return getBrief();
        }
        if (pos == 12)
        {
            return getCopyrightStatus();
        }
        if (pos == 13)
        {
            return new Integer(getPaid());
        }
        if (pos == 14)
        {
            return new Double(getSeconds());
        }
        if (pos == 15)
        {
            return new Integer(getBlocked());
        }
        if (pos == 16)
        {
            return new Integer(getOrderId());
        }
        if (pos == 17)
        {
            return getViewUrl();
        }
        if (pos == 18)
        {
            return getDetailUrl();
        }
        if (pos == 19)
        {
            return new Integer(getSource());
        }
        if (pos == 20)
        {
            return getSearchkeys();
        }
        if (pos == 21)
        {
            return getHaibao();
        }
        if (pos == 22)
        {
            return new Integer(getFlag());
        }
        if (pos == 23)
        {
            return getUpdateTime();
        }
        if (pos == 24)
        {
            return getCreateTime();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("ContentId", value);
        }
    if (position == 2)
        {
            return setByName("Name", value);
        }
    if (position == 3)
        {
            return setByName("Logo", value);
        }
    if (position == 4)
        {
            return setByName("Cates", value);
        }
    if (position == 5)
        {
            return setByName("Types", value);
        }
    if (position == 6)
        {
            return setByName("Area", value);
        }
    if (position == 7)
        {
            return setByName("Language", value);
        }
    if (position == 8)
        {
            return setByName("ReleaseTime", value);
        }
    if (position == 9)
        {
            return setByName("ReleaseYear", value);
        }
    if (position == 10)
        {
            return setByName("Firstletter", value);
        }
    if (position == 11)
        {
            return setByName("Brief", value);
        }
    if (position == 12)
        {
            return setByName("CopyrightStatus", value);
        }
    if (position == 13)
        {
            return setByName("Paid", value);
        }
    if (position == 14)
        {
            return setByName("Seconds", value);
        }
    if (position == 15)
        {
            return setByName("Blocked", value);
        }
    if (position == 16)
        {
            return setByName("OrderId", value);
        }
    if (position == 17)
        {
            return setByName("ViewUrl", value);
        }
    if (position == 18)
        {
            return setByName("DetailUrl", value);
        }
    if (position == 19)
        {
            return setByName("Source", value);
        }
    if (position == 20)
        {
            return setByName("Searchkeys", value);
        }
    if (position == 21)
        {
            return setByName("Haibao", value);
        }
    if (position == 22)
        {
            return setByName("Flag", value);
        }
    if (position == 23)
        {
            return setByName("UpdateTime", value);
        }
    if (position == 24)
        {
            return setByName("CreateTime", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(MusicPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    MusicPeer.doInsert((Music) this, con);
                    setNew(false);
                }
                else
                {
                    MusicPeer.doUpdate((Music) this, con);
                }
            }

            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
        setId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
        setId(Integer.parseInt(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Music copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Music copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Music copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Music(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Music copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Music(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Music copyInto(Music copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Music copyInto(Music copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Music copyInto(Music copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setContentId(contentId);
        copyObj.setName(name);
        copyObj.setLogo(logo);
        copyObj.setCates(cates);
        copyObj.setTypes(types);
        copyObj.setArea(area);
        copyObj.setLanguage(language);
        copyObj.setReleaseTime(releaseTime);
        copyObj.setReleaseYear(releaseYear);
        copyObj.setFirstletter(firstletter);
        copyObj.setBrief(brief);
        copyObj.setCopyrightStatus(copyrightStatus);
        copyObj.setPaid(paid);
        copyObj.setSeconds(seconds);
        copyObj.setBlocked(blocked);
        copyObj.setOrderId(orderId);
        copyObj.setViewUrl(viewUrl);
        copyObj.setDetailUrl(detailUrl);
        copyObj.setSource(source);
        copyObj.setSearchkeys(searchkeys);
        copyObj.setHaibao(haibao);
        copyObj.setFlag(flag);
        copyObj.setUpdateTime(updateTime);
        copyObj.setCreateTime(createTime);

        copyObj.setId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Music copyInto(Music copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setContentId(contentId);
        copyObj.setName(name);
        copyObj.setLogo(logo);
        copyObj.setCates(cates);
        copyObj.setTypes(types);
        copyObj.setArea(area);
        copyObj.setLanguage(language);
        copyObj.setReleaseTime(releaseTime);
        copyObj.setReleaseYear(releaseYear);
        copyObj.setFirstletter(firstletter);
        copyObj.setBrief(brief);
        copyObj.setCopyrightStatus(copyrightStatus);
        copyObj.setPaid(paid);
        copyObj.setSeconds(seconds);
        copyObj.setBlocked(blocked);
        copyObj.setOrderId(orderId);
        copyObj.setViewUrl(viewUrl);
        copyObj.setDetailUrl(detailUrl);
        copyObj.setSource(source);
        copyObj.setSearchkeys(searchkeys);
        copyObj.setHaibao(haibao);
        copyObj.setFlag(flag);
        copyObj.setUpdateTime(updateTime);
        copyObj.setCreateTime(createTime);

        copyObj.setId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public MusicPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return MusicPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Music:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("ContentId = ")
           .append(getContentId())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Logo = ")
           .append(getLogo())
           .append("\n");
        str.append("Cates = ")
           .append(getCates())
           .append("\n");
        str.append("Types = ")
           .append(getTypes())
           .append("\n");
        str.append("Area = ")
           .append(getArea())
           .append("\n");
        str.append("Language = ")
           .append(getLanguage())
           .append("\n");
        str.append("ReleaseTime = ")
           .append(getReleaseTime())
           .append("\n");
        str.append("ReleaseYear = ")
           .append(getReleaseYear())
           .append("\n");
        str.append("Firstletter = ")
           .append(getFirstletter())
           .append("\n");
        str.append("Brief = ")
           .append(getBrief())
           .append("\n");
        str.append("CopyrightStatus = ")
           .append(getCopyrightStatus())
           .append("\n");
        str.append("Paid = ")
           .append(getPaid())
           .append("\n");
        str.append("Seconds = ")
           .append(getSeconds())
           .append("\n");
        str.append("Blocked = ")
           .append(getBlocked())
           .append("\n");
        str.append("OrderId = ")
           .append(getOrderId())
           .append("\n");
        str.append("ViewUrl = ")
           .append(getViewUrl())
           .append("\n");
        str.append("DetailUrl = ")
           .append(getDetailUrl())
           .append("\n");
        str.append("Source = ")
           .append(getSource())
           .append("\n");
        str.append("Searchkeys = ")
           .append(getSearchkeys())
           .append("\n");
        str.append("Haibao = ")
           .append(getHaibao())
           .append("\n");
        str.append("Flag = ")
           .append(getFlag())
           .append("\n");
        str.append("UpdateTime = ")
           .append(getUpdateTime())
           .append("\n");
        str.append("CreateTime = ")
           .append(getCreateTime())
           .append("\n");
        return(str.toString());
    }
}
