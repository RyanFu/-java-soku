package com.youku.soku.top.mapping;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;



                

/**
 * πÿº¸¥ ¿‡–Õ
 *
 * This class was autogenerated by Torque on:
 *
 * [Mon May 02 14:40:09 CST 2011]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to TypeWords
 */
public abstract class BaseTypeWords extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1304318409218L;

    /** The Peer class */
    private static final TypeWordsPeer peer =
        new TypeWordsPeer();

        
    /** The value for the id field */
    private int id;
      
    /** The value for the programmeId field */
    private int programmeId;
      
    /** The value for the keyword field */
    private String keyword;
      
    /** The value for the cate field */
    private int cate;
      
    /** The value for the pic field */
    private String pic;
                                                
    /** The value for the state field */
    private String state = "uncheck";
      
    /** The value for the checker field */
    private String checker;
      
    /** The value for the createDate field */
    private Date createDate;
  
            
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                        
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) 
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the ProgrammeId
     *
     * @return int
     */
    public int getProgrammeId()
    {
        return programmeId;
    }

                        
    /**
     * Set the value of ProgrammeId
     *
     * @param v new value
     */
    public void setProgrammeId(int v) 
    {
    
                  if (this.programmeId != v)
              {
            this.programmeId = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Keyword
     *
     * @return String
     */
    public String getKeyword()
    {
        return keyword;
    }

                        
    /**
     * Set the value of Keyword
     *
     * @param v new value
     */
    public void setKeyword(String v) 
    {
    
                  if (!ObjectUtils.equals(this.keyword, v))
              {
            this.keyword = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Cate
     *
     * @return int
     */
    public int getCate()
    {
        return cate;
    }

                        
    /**
     * Set the value of Cate
     *
     * @param v new value
     */
    public void setCate(int v) 
    {
    
                  if (this.cate != v)
              {
            this.cate = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Pic
     *
     * @return String
     */
    public String getPic()
    {
        return pic;
    }

                        
    /**
     * Set the value of Pic
     *
     * @param v new value
     */
    public void setPic(String v) 
    {
    
                  if (!ObjectUtils.equals(this.pic, v))
              {
            this.pic = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the State
     *
     * @return String
     */
    public String getState()
    {
        return state;
    }

                        
    /**
     * Set the value of State
     *
     * @param v new value
     */
    public void setState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.state, v))
              {
            this.state = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Checker
     *
     * @return String
     */
    public String getChecker()
    {
        return checker;
    }

                        
    /**
     * Set the value of Checker
     *
     * @param v new value
     */
    public void setChecker(String v) 
    {
    
                  if (!ObjectUtils.equals(this.checker, v))
              {
            this.checker = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the CreateDate
     *
     * @return Date
     */
    public Date getCreateDate()
    {
        return createDate;
    }

                        
    /**
     * Set the value of CreateDate
     *
     * @param v new value
     */
    public void setCreateDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.createDate, v))
              {
            this.createDate = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList<String>();
              fieldNames.add("Id");
              fieldNames.add("ProgrammeId");
              fieldNames.add("Keyword");
              fieldNames.add("Cate");
              fieldNames.add("Pic");
              fieldNames.add("State");
              fieldNames.add("Checker");
              fieldNames.add("CreateDate");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("ProgrammeId"))
        {
                return new Integer(getProgrammeId());
            }
          if (name.equals("Keyword"))
        {
                return getKeyword();
            }
          if (name.equals("Cate"))
        {
                return new Integer(getCate());
            }
          if (name.equals("Pic"))
        {
                return getPic();
            }
          if (name.equals("State"))
        {
                return getState();
            }
          if (name.equals("Checker"))
        {
                return getChecker();
            }
          if (name.equals("CreateDate"))
        {
                return getCreateDate();
            }
          return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
          if (name.equals("Id"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setId(((Integer) value).intValue());
                      return true;
        }
          if (name.equals("ProgrammeId"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setProgrammeId(((Integer) value).intValue());
                      return true;
        }
          if (name.equals("Keyword"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setKeyword((String) value);
                      return true;
        }
          if (name.equals("Cate"))
        {
                      if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setCate(((Integer) value).intValue());
                      return true;
        }
          if (name.equals("Pic"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setPic((String) value);
                      return true;
        }
          if (name.equals("State"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setState((String) value);
                      return true;
        }
          if (name.equals("Checker"))
        {
                      // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setChecker((String) value);
                      return true;
        }
          if (name.equals("CreateDate"))
        {
                      // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreateDate((Date) value);
                      return true;
        }
          return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(TypeWordsPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(TypeWordsPeer.PROGRAMME_ID))
        {
                return new Integer(getProgrammeId());
            }
          if (name.equals(TypeWordsPeer.KEYWORD))
        {
                return getKeyword();
            }
          if (name.equals(TypeWordsPeer.CATE))
        {
                return new Integer(getCate());
            }
          if (name.equals(TypeWordsPeer.PIC))
        {
                return getPic();
            }
          if (name.equals(TypeWordsPeer.STATE))
        {
                return getState();
            }
          if (name.equals(TypeWordsPeer.CHECKER))
        {
                return getChecker();
            }
          if (name.equals(TypeWordsPeer.CREATE_DATE))
        {
                return getCreateDate();
            }
          return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (TypeWordsPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
        if (TypeWordsPeer.PROGRAMME_ID.equals(name))
        {
            return setByName("ProgrammeId", value);
        }
        if (TypeWordsPeer.KEYWORD.equals(name))
        {
            return setByName("Keyword", value);
        }
        if (TypeWordsPeer.CATE.equals(name))
        {
            return setByName("Cate", value);
        }
        if (TypeWordsPeer.PIC.equals(name))
        {
            return setByName("Pic", value);
        }
        if (TypeWordsPeer.STATE.equals(name))
        {
            return setByName("State", value);
        }
        if (TypeWordsPeer.CHECKER.equals(name))
        {
            return setByName("Checker", value);
        }
        if (TypeWordsPeer.CREATE_DATE.equals(name))
        {
            return setByName("CreateDate", value);
        }
          return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return new Integer(getProgrammeId());
            }
              if (pos == 2)
        {
                return getKeyword();
            }
              if (pos == 3)
        {
                return new Integer(getCate());
            }
              if (pos == 4)
        {
                return getPic();
            }
              if (pos == 5)
        {
                return getState();
            }
              if (pos == 6)
        {
                return getChecker();
            }
              if (pos == 7)
        {
                return getCreateDate();
            }
              return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("Id", value);
        }
          if (position == 1)
        {
            return setByName("ProgrammeId", value);
        }
          if (position == 2)
        {
            return setByName("Keyword", value);
        }
          if (position == 3)
        {
            return setByName("Cate", value);
        }
          if (position == 4)
        {
            return setByName("Pic", value);
        }
          if (position == 5)
        {
            return setByName("State", value);
        }
          if (position == 6)
        {
            return setByName("Checker", value);
        }
          if (position == 7)
        {
            return setByName("CreateDate", value);
        }
              return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(TypeWordsPeer.DATABASE_NAME);
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    TypeWordsPeer.doInsert((TypeWords) this, con);
                    setNew(false);
                }
                else
                {
                    TypeWordsPeer.doUpdate((TypeWords) this, con);
                }
                }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public TypeWords copy() throws TorqueException
    {
            return copy(true);
        }
  
          /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public TypeWords copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new TypeWords(), deepcopy);
    }
      
      /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     * @param copyObj the object to fill.
     */
    protected TypeWords copyInto(TypeWords copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }
      
    /**
     * Fills the copyObj with the contents of this object.
       * If deepcopy is true, The associated objects are also copied 
     * and treated as new objects.
       * @param copyObj the object to fill.
       * @param deepcopy whether the associated objects should be copied.
       */
      protected TypeWords copyInto(TypeWords copyObj, boolean deepcopy) throws TorqueException
      {
          copyObj.setId(id);
          copyObj.setProgrammeId(programmeId);
          copyObj.setKeyword(keyword);
          copyObj.setCate(cate);
          copyObj.setPic(pic);
          copyObj.setState(state);
          copyObj.setChecker(checker);
          copyObj.setCreateDate(createDate);
  
                            copyObj.setId( 0);
                                                      
          if (deepcopy) 
        {
            }
          return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public TypeWordsPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return TypeWordsPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("TypeWords:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("ProgrammeId = ")
               .append(getProgrammeId())
             .append("\n");
        str.append("Keyword = ")
               .append(getKeyword())
             .append("\n");
        str.append("Cate = ")
               .append(getCate())
             .append("\n");
        str.append("Pic = ")
               .append(getPic())
             .append("\n");
        str.append("State = ")
               .append(getState())
             .append("\n");
        str.append("Checker = ")
               .append(getChecker())
             .append("\n");
        str.append("CreateDate = ")
               .append(getCreateDate())
             .append("\n");
        return(str.toString());
    }
}
