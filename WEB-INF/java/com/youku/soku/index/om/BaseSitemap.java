package com.youku.soku.index.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;



                      

/**
 * ����Ա���ύ��վ����Ƶurl
 *
 * This class was autogenerated by Torque on:
 *
 * [Tue Aug 25 17:23:05 CST 2009]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Sitemap
 */
public abstract class BaseSitemap extends BaseObject
{
    /** The Peer class */
    private static final SitemapPeer peer =
        new SitemapPeer();

        
    /** The value for the id field */
    private int id;
      
    /** The value for the siteName field */
    private String siteName;
      
    /** The value for the url field */
    private String url;
      
    /** The value for the description field */
    private String description;
      
    /** The value for the email field */
    private String email;
                                          
    /** The value for the updatePeri field */
    private int updatePeri = 1440;
      
    /** The value for the createTime field */
    private Date createTime;
      
    /** The value for the lastModified field */
    private String lastModified;
      
    /** The value for the lastCheckTime field */
    private Date lastCheckTime;
      
    /** The value for the failTimes field */
    private int failTimes;
                                          
    /** The value for the statusId field */
    private int statusId = 0;
  
            
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                        
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) 
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the SiteName
     *
     * @return String
     */
    public String getSiteName()
    {
        return siteName;
    }

                        
    /**
     * Set the value of SiteName
     *
     * @param v new value
     */
    public void setSiteName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.siteName, v))
              {
            this.siteName = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Url
     *
     * @return String
     */
    public String getUrl()
    {
        return url;
    }

                        
    /**
     * Set the value of Url
     *
     * @param v new value
     */
    public void setUrl(String v) 
    {
    
                  if (!ObjectUtils.equals(this.url, v))
              {
            this.url = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Description
     *
     * @return String
     */
    public String getDescription()
    {
        return description;
    }

                        
    /**
     * Set the value of Description
     *
     * @param v new value
     */
    public void setDescription(String v) 
    {
    
                  if (!ObjectUtils.equals(this.description, v))
              {
            this.description = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Email
     *
     * @return String
     */
    public String getEmail()
    {
        return email;
    }

                        
    /**
     * Set the value of Email
     *
     * @param v new value
     */
    public void setEmail(String v) 
    {
    
                  if (!ObjectUtils.equals(this.email, v))
              {
            this.email = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the UpdatePeri
     *
     * @return int
     */
    public int getUpdatePeri()
    {
        return updatePeri;
    }

                        
    /**
     * Set the value of UpdatePeri
     *
     * @param v new value
     */
    public void setUpdatePeri(int v) 
    {
    
                  if (this.updatePeri != v)
              {
            this.updatePeri = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the CreateTime
     *
     * @return Date
     */
    public Date getCreateTime()
    {
        return createTime;
    }

                        
    /**
     * Set the value of CreateTime
     *
     * @param v new value
     */
    public void setCreateTime(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.createTime, v))
              {
            this.createTime = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the LastModified
     *
     * @return String
     */
    public String getLastModified()
    {
        return lastModified;
    }

                        
    /**
     * Set the value of LastModified
     *
     * @param v new value
     */
    public void setLastModified(String v) 
    {
    
                  if (!ObjectUtils.equals(this.lastModified, v))
              {
            this.lastModified = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the LastCheckTime
     *
     * @return Date
     */
    public Date getLastCheckTime()
    {
        return lastCheckTime;
    }

                        
    /**
     * Set the value of LastCheckTime
     *
     * @param v new value
     */
    public void setLastCheckTime(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.lastCheckTime, v))
              {
            this.lastCheckTime = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the FailTimes
     *
     * @return int
     */
    public int getFailTimes()
    {
        return failTimes;
    }

                        
    /**
     * Set the value of FailTimes
     *
     * @param v new value
     */
    public void setFailTimes(int v) 
    {
    
                  if (this.failTimes != v)
              {
            this.failTimes = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the StatusId
     *
     * @return int
     */
    public int getStatusId()
    {
        return statusId;
    }

                        
    /**
     * Set the value of StatusId
     *
     * @param v new value
     */
    public void setStatusId(int v) 
    {
    
                  if (this.statusId != v)
              {
            this.statusId = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("SiteName");
              fieldNames.add("Url");
              fieldNames.add("Description");
              fieldNames.add("Email");
              fieldNames.add("UpdatePeri");
              fieldNames.add("CreateTime");
              fieldNames.add("LastModified");
              fieldNames.add("LastCheckTime");
              fieldNames.add("FailTimes");
              fieldNames.add("StatusId");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("SiteName"))
        {
                return getSiteName();
            }
          if (name.equals("Url"))
        {
                return getUrl();
            }
          if (name.equals("Description"))
        {
                return getDescription();
            }
          if (name.equals("Email"))
        {
                return getEmail();
            }
          if (name.equals("UpdatePeri"))
        {
                return new Integer(getUpdatePeri());
            }
          if (name.equals("CreateTime"))
        {
                return getCreateTime();
            }
          if (name.equals("LastModified"))
        {
                return getLastModified();
            }
          if (name.equals("LastCheckTime"))
        {
                return getLastCheckTime();
            }
          if (name.equals("FailTimes"))
        {
                return new Integer(getFailTimes());
            }
          if (name.equals("StatusId"))
        {
                return new Integer(getStatusId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(SitemapPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(SitemapPeer.SITE_NAME))
        {
                return getSiteName();
            }
          if (name.equals(SitemapPeer.URL))
        {
                return getUrl();
            }
          if (name.equals(SitemapPeer.DESCRIPTION))
        {
                return getDescription();
            }
          if (name.equals(SitemapPeer.EMAIL))
        {
                return getEmail();
            }
          if (name.equals(SitemapPeer.UPDATE_PERI))
        {
                return new Integer(getUpdatePeri());
            }
          if (name.equals(SitemapPeer.CREATE_TIME))
        {
                return getCreateTime();
            }
          if (name.equals(SitemapPeer.LAST_MODIFIED))
        {
                return getLastModified();
            }
          if (name.equals(SitemapPeer.LAST_CHECK_TIME))
        {
                return getLastCheckTime();
            }
          if (name.equals(SitemapPeer.FAIL_TIMES))
        {
                return new Integer(getFailTimes());
            }
          if (name.equals(SitemapPeer.STATUS_ID))
        {
                return new Integer(getStatusId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getSiteName();
            }
              if (pos == 2)
        {
                return getUrl();
            }
              if (pos == 3)
        {
                return getDescription();
            }
              if (pos == 4)
        {
                return getEmail();
            }
              if (pos == 5)
        {
                return new Integer(getUpdatePeri());
            }
              if (pos == 6)
        {
                return getCreateTime();
            }
              if (pos == 7)
        {
                return getLastModified();
            }
              if (pos == 8)
        {
                return getLastCheckTime();
            }
              if (pos == 9)
        {
                return new Integer(getFailTimes());
            }
              if (pos == 10)
        {
                return new Integer(getStatusId());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(SitemapPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    SitemapPeer.doInsert((Sitemap) this, con);
                    setNew(false);
                }
                else
                {
                    SitemapPeer.doUpdate((Sitemap) this, con);
                }
                }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Sitemap copy() throws TorqueException
    {
        return copyInto(new Sitemap());
    }
  
    protected Sitemap copyInto(Sitemap copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setSiteName(siteName);
          copyObj.setUrl(url);
          copyObj.setDescription(description);
          copyObj.setEmail(email);
          copyObj.setUpdatePeri(updatePeri);
          copyObj.setCreateTime(createTime);
          copyObj.setLastModified(lastModified);
          copyObj.setLastCheckTime(lastCheckTime);
          copyObj.setFailTimes(failTimes);
          copyObj.setStatusId(statusId);
  
                            copyObj.setId( 0);
                                                                        
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public SitemapPeer getPeer()
    {
        return peer;
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Sitemap:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("SiteName = ")
               .append(getSiteName())
             .append("\n");
        str.append("Url = ")
               .append(getUrl())
             .append("\n");
        str.append("Description = ")
               .append(getDescription())
             .append("\n");
        str.append("Email = ")
               .append(getEmail())
             .append("\n");
        str.append("UpdatePeri = ")
               .append(getUpdatePeri())
             .append("\n");
        str.append("CreateTime = ")
               .append(getCreateTime())
             .append("\n");
        str.append("LastModified = ")
               .append(getLastModified())
             .append("\n");
        str.append("LastCheckTime = ")
               .append(getLastCheckTime())
             .append("\n");
        str.append("FailTimes = ")
               .append(getFailTimes())
             .append("\n");
        str.append("StatusId = ")
               .append(getStatusId())
             .append("\n");
        return(str.toString());
    }
}
