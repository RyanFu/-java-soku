package com.youku.soku.index.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;



          

/**
 * ��Ƶ�����
 *
 * This class was autogenerated by Torque on:
 *
 * [Tue Aug 25 17:23:05 CST 2009]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Movielog
 */
public abstract class BaseMovielog extends BaseObject
{
    /** The Peer class */
    private static final MovielogPeer peer =
        new MovielogPeer();

        
    /** The value for the id field */
    private int id;
      
    /** The value for the tablename field */
    private String tablename;
      
    /** The value for the vid field */
    private int vid;
      
    /** The value for the state field */
    private String state;
      
    /** The value for the updatetime field */
    private Date updatetime;
  
            
    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }

                        
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) 
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Tablename
     *
     * @return String
     */
    public String getTablename()
    {
        return tablename;
    }

                        
    /**
     * Set the value of Tablename
     *
     * @param v new value
     */
    public void setTablename(String v) 
    {
    
                  if (!ObjectUtils.equals(this.tablename, v))
              {
            this.tablename = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Vid
     *
     * @return int
     */
    public int getVid()
    {
        return vid;
    }

                        
    /**
     * Set the value of Vid
     *
     * @param v new value
     */
    public void setVid(int v) 
    {
    
                  if (this.vid != v)
              {
            this.vid = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the State
     *
     * @return String
     */
    public String getState()
    {
        return state;
    }

                        
    /**
     * Set the value of State
     *
     * @param v new value
     */
    public void setState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.state, v))
              {
            this.state = v;
            setModified(true);
        }
    
          
              }
          
    /**
     * Get the Updatetime
     *
     * @return Date
     */
    public Date getUpdatetime()
    {
        return updatetime;
    }

                        
    /**
     * Set the value of Updatetime
     *
     * @param v new value
     */
    public void setUpdatetime(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.updatetime, v))
              {
            this.updatetime = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Id");
              fieldNames.add("Tablename");
              fieldNames.add("Vid");
              fieldNames.add("State");
              fieldNames.add("Updatetime");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Id"))
        {
                return new Integer(getId());
            }
          if (name.equals("Tablename"))
        {
                return getTablename();
            }
          if (name.equals("Vid"))
        {
                return new Integer(getVid());
            }
          if (name.equals("State"))
        {
                return getState();
            }
          if (name.equals("Updatetime"))
        {
                return getUpdatetime();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(MovielogPeer.ID))
        {
                return new Integer(getId());
            }
          if (name.equals(MovielogPeer.TABLENAME))
        {
                return getTablename();
            }
          if (name.equals(MovielogPeer.VID))
        {
                return new Integer(getVid());
            }
          if (name.equals(MovielogPeer.STATE))
        {
                return getState();
            }
          if (name.equals(MovielogPeer.UPDATETIME))
        {
                return getUpdatetime();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getId());
            }
              if (pos == 1)
        {
                return getTablename();
            }
              if (pos == 2)
        {
                return new Integer(getVid());
            }
              if (pos == 3)
        {
                return getState();
            }
              if (pos == 4)
        {
                return getUpdatetime();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(MovielogPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    MovielogPeer.doInsert((Movielog) this, con);
                    setNew(false);
                }
                else
                {
                    MovielogPeer.doUpdate((Movielog) this, con);
                }
                }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Movielog copy() throws TorqueException
    {
        return copyInto(new Movielog());
    }
  
    protected Movielog copyInto(Movielog copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setTablename(tablename);
          copyObj.setVid(vid);
          copyObj.setState(state);
          copyObj.setUpdatetime(updatetime);
  
                            copyObj.setId( 0);
                                    
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public MovielogPeer getPeer()
    {
        return peer;
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Movielog:\n");
        str.append("Id = ")
               .append(getId())
             .append("\n");
        str.append("Tablename = ")
               .append(getTablename())
             .append("\n");
        str.append("Vid = ")
               .append(getVid())
             .append("\n");
        str.append("State = ")
               .append(getState())
             .append("\n");
        str.append("Updatetime = ")
               .append(getUpdatetime())
             .append("\n");
        return(str.toString());
    }
}
