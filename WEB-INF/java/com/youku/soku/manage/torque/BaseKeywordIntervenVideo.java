package com.youku.soku.manage.torque;


import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Transaction;





/**
 * the search result of the interven keyword
 *
 * This class was autogenerated by Torque on:
 *
 * [Wed Mar 10 16:13:12 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to KeywordIntervenVideo
 */
public abstract class BaseKeywordIntervenVideo extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1268208792937L;

    /** The Peer class */
    private static final KeywordIntervenVideoPeer peer =
        new KeywordIntervenVideoPeer();


    /** The value for the videoId field */
    private int videoId;

    /** The value for the name field */
    private String name;

    /** The value for the url field */
    private String url;

    /** The value for the videoLength field */
    private int videoLength;

    /** The value for the source field */
    private String source;

    /** The value for the category field */
    private String category;

    /** The value for the indexType field */
    private int indexType;

    /** The value for the sort field */
    private int sort;

    /** The value for the createDate field */
    private Date createDate;

    /** The value for the modifyDate field */
    private Date modifyDate;

    /** The value for the expiredDate field */
    private Date expiredDate;

    /** The value for the picturePath field */
    private String picturePath;

    /** The value for the keywordId field */
    private int keywordId;


    /**
     * Get the VideoId
     *
     * @return int
     */
    public int getVideoId()
    {
        return videoId;
    }


    /**
     * Set the value of VideoId
     *
     * @param v new value
     */
    public void setVideoId(int v) 
    {

        if (this.videoId != v)
        {
            this.videoId = v;
            setModified(true);
        }


    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Url
     *
     * @return String
     */
    public String getUrl()
    {
        return url;
    }


    /**
     * Set the value of Url
     *
     * @param v new value
     */
    public void setUrl(String v) 
    {

        if (!ObjectUtils.equals(this.url, v))
        {
            this.url = v;
            setModified(true);
        }


    }

    /**
     * Get the VideoLength
     *
     * @return int
     */
    public int getVideoLength()
    {
        return videoLength;
    }


    /**
     * Set the value of VideoLength
     *
     * @param v new value
     */
    public void setVideoLength(int v) 
    {

        if (this.videoLength != v)
        {
            this.videoLength = v;
            setModified(true);
        }


    }

    /**
     * Get the Source
     *
     * @return String
     */
    public String getSource()
    {
        return source;
    }


    /**
     * Set the value of Source
     *
     * @param v new value
     */
    public void setSource(String v) 
    {

        if (!ObjectUtils.equals(this.source, v))
        {
            this.source = v;
            setModified(true);
        }


    }

    /**
     * Get the Category
     *
     * @return String
     */
    public String getCategory()
    {
        return category;
    }


    /**
     * Set the value of Category
     *
     * @param v new value
     */
    public void setCategory(String v) 
    {

        if (!ObjectUtils.equals(this.category, v))
        {
            this.category = v;
            setModified(true);
        }


    }

    /**
     * Get the IndexType
     *
     * @return int
     */
    public int getIndexType()
    {
        return indexType;
    }


    /**
     * Set the value of IndexType
     *
     * @param v new value
     */
    public void setIndexType(int v) 
    {

        if (this.indexType != v)
        {
            this.indexType = v;
            setModified(true);
        }


    }

    /**
     * Get the Sort
     *
     * @return int
     */
    public int getSort()
    {
        return sort;
    }


    /**
     * Set the value of Sort
     *
     * @param v new value
     */
    public void setSort(int v) 
    {

        if (this.sort != v)
        {
            this.sort = v;
            setModified(true);
        }


    }

    /**
     * Get the CreateDate
     *
     * @return Date
     */
    public Date getCreateDate()
    {
        return createDate;
    }


    /**
     * Set the value of CreateDate
     *
     * @param v new value
     */
    public void setCreateDate(Date v) 
    {

        if (!ObjectUtils.equals(this.createDate, v))
        {
            this.createDate = v;
            setModified(true);
        }


    }

    /**
     * Get the ModifyDate
     *
     * @return Date
     */
    public Date getModifyDate()
    {
        return modifyDate;
    }


    /**
     * Set the value of ModifyDate
     *
     * @param v new value
     */
    public void setModifyDate(Date v) 
    {

        if (!ObjectUtils.equals(this.modifyDate, v))
        {
            this.modifyDate = v;
            setModified(true);
        }


    }

    /**
     * Get the ExpiredDate
     *
     * @return Date
     */
    public Date getExpiredDate()
    {
        return expiredDate;
    }


    /**
     * Set the value of ExpiredDate
     *
     * @param v new value
     */
    public void setExpiredDate(Date v) 
    {

        if (!ObjectUtils.equals(this.expiredDate, v))
        {
            this.expiredDate = v;
            setModified(true);
        }


    }

    /**
     * Get the PicturePath
     *
     * @return String
     */
    public String getPicturePath()
    {
        return picturePath;
    }


    /**
     * Set the value of PicturePath
     *
     * @param v new value
     */
    public void setPicturePath(String v) 
    {

        if (!ObjectUtils.equals(this.picturePath, v))
        {
            this.picturePath = v;
            setModified(true);
        }


    }

    /**
     * Get the KeywordId
     *
     * @return int
     */
    public int getKeywordId()
    {
        return keywordId;
    }


    /**
     * Set the value of KeywordId
     *
     * @param v new value
     */
    public void setKeywordId(int v) throws TorqueException
    {

        if (this.keywordId != v)
        {
            this.keywordId = v;
            setModified(true);
        }


        if (aKeywordInterven != null && !(aKeywordInterven.getKeywordId() == v))
        {
            aKeywordInterven = null;
        }

    }

    



    private KeywordInterven aKeywordInterven;

    /**
     * Declares an association between this object and a KeywordInterven object
     *
     * @param v KeywordInterven
     * @throws TorqueException
     */
    public void setKeywordInterven(KeywordInterven v) throws TorqueException
    {
        if (v == null)
        {
            setKeywordId( 0);
        }
        else
        {
            setKeywordId(v.getKeywordId());
        }
        aKeywordInterven = v;
    }


    /**
     * Returns the associated KeywordInterven object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated KeywordInterven object
     * @throws TorqueException
     */
    public KeywordInterven getKeywordInterven()
        throws TorqueException
    {
        if (aKeywordInterven == null && (this.keywordId != 0))
        {
            aKeywordInterven = KeywordIntervenPeer.retrieveByPK(SimpleKey.keyFor(this.keywordId));
        }
        return aKeywordInterven;
    }

    /**
     * Return the associated KeywordInterven object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated KeywordInterven object
     * @throws TorqueException
     */
    public KeywordInterven getKeywordInterven(Connection connection)
        throws TorqueException
    {
        if (aKeywordInterven == null && (this.keywordId != 0))
        {
            aKeywordInterven = KeywordIntervenPeer.retrieveByPK(SimpleKey.keyFor(this.keywordId), connection);
        }
        return aKeywordInterven;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setKeywordIntervenKey(ObjectKey key) throws TorqueException
    {

        setKeywordId(((NumberKey) key).intValue());
    }
   
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("VideoId");
            fieldNames.add("Name");
            fieldNames.add("Url");
            fieldNames.add("VideoLength");
            fieldNames.add("Source");
            fieldNames.add("Category");
            fieldNames.add("IndexType");
            fieldNames.add("Sort");
            fieldNames.add("CreateDate");
            fieldNames.add("ModifyDate");
            fieldNames.add("ExpiredDate");
            fieldNames.add("PicturePath");
            fieldNames.add("KeywordId");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("VideoId"))
        {
            return new Integer(getVideoId());
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Url"))
        {
            return getUrl();
        }
        if (name.equals("VideoLength"))
        {
            return new Integer(getVideoLength());
        }
        if (name.equals("Source"))
        {
            return getSource();
        }
        if (name.equals("Category"))
        {
            return getCategory();
        }
        if (name.equals("IndexType"))
        {
            return new Integer(getIndexType());
        }
        if (name.equals("Sort"))
        {
            return new Integer(getSort());
        }
        if (name.equals("CreateDate"))
        {
            return getCreateDate();
        }
        if (name.equals("ModifyDate"))
        {
            return getModifyDate();
        }
        if (name.equals("ExpiredDate"))
        {
            return getExpiredDate();
        }
        if (name.equals("PicturePath"))
        {
            return getPicturePath();
        }
        if (name.equals("KeywordId"))
        {
            return new Integer(getKeywordId());
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("VideoId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setVideoId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Url"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setUrl((String) value);
            return true;
        }
        if (name.equals("VideoLength"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setVideoLength(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Source"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setSource((String) value);
            return true;
        }
        if (name.equals("Category"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCategory((String) value);
            return true;
        }
        if (name.equals("IndexType"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setIndexType(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Sort"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setSort(((Integer) value).intValue());
            return true;
        }
        if (name.equals("CreateDate"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreateDate((Date) value);
            return true;
        }
        if (name.equals("ModifyDate"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifyDate((Date) value);
            return true;
        }
        if (name.equals("ExpiredDate"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setExpiredDate((Date) value);
            return true;
        }
        if (name.equals("PicturePath"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setPicturePath((String) value);
            return true;
        }
        if (name.equals("KeywordId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setKeywordId(((Integer) value).intValue());
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(KeywordIntervenVideoPeer.VIDEO_ID))
        {
            return new Integer(getVideoId());
        }
        if (name.equals(KeywordIntervenVideoPeer.NAME))
        {
            return getName();
        }
        if (name.equals(KeywordIntervenVideoPeer.URL))
        {
            return getUrl();
        }
        if (name.equals(KeywordIntervenVideoPeer.VIDEO_LENGTH))
        {
            return new Integer(getVideoLength());
        }
        if (name.equals(KeywordIntervenVideoPeer.SOURCE))
        {
            return getSource();
        }
        if (name.equals(KeywordIntervenVideoPeer.CATEGORY))
        {
            return getCategory();
        }
        if (name.equals(KeywordIntervenVideoPeer.INDEX_TYPE))
        {
            return new Integer(getIndexType());
        }
        if (name.equals(KeywordIntervenVideoPeer.SORT))
        {
            return new Integer(getSort());
        }
        if (name.equals(KeywordIntervenVideoPeer.CREATE_DATE))
        {
            return getCreateDate();
        }
        if (name.equals(KeywordIntervenVideoPeer.MODIFY_DATE))
        {
            return getModifyDate();
        }
        if (name.equals(KeywordIntervenVideoPeer.EXPIRED_DATE))
        {
            return getExpiredDate();
        }
        if (name.equals(KeywordIntervenVideoPeer.PICTURE_PATH))
        {
            return getPicturePath();
        }
        if (name.equals(KeywordIntervenVideoPeer.KEYWORD_ID))
        {
            return new Integer(getKeywordId());
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (KeywordIntervenVideoPeer.VIDEO_ID.equals(name))
        {
            return setByName("VideoId", value);
        }
      if (KeywordIntervenVideoPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (KeywordIntervenVideoPeer.URL.equals(name))
        {
            return setByName("Url", value);
        }
      if (KeywordIntervenVideoPeer.VIDEO_LENGTH.equals(name))
        {
            return setByName("VideoLength", value);
        }
      if (KeywordIntervenVideoPeer.SOURCE.equals(name))
        {
            return setByName("Source", value);
        }
      if (KeywordIntervenVideoPeer.CATEGORY.equals(name))
        {
            return setByName("Category", value);
        }
      if (KeywordIntervenVideoPeer.INDEX_TYPE.equals(name))
        {
            return setByName("IndexType", value);
        }
      if (KeywordIntervenVideoPeer.SORT.equals(name))
        {
            return setByName("Sort", value);
        }
      if (KeywordIntervenVideoPeer.CREATE_DATE.equals(name))
        {
            return setByName("CreateDate", value);
        }
      if (KeywordIntervenVideoPeer.MODIFY_DATE.equals(name))
        {
            return setByName("ModifyDate", value);
        }
      if (KeywordIntervenVideoPeer.EXPIRED_DATE.equals(name))
        {
            return setByName("ExpiredDate", value);
        }
      if (KeywordIntervenVideoPeer.PICTURE_PATH.equals(name))
        {
            return setByName("PicturePath", value);
        }
      if (KeywordIntervenVideoPeer.KEYWORD_ID.equals(name))
        {
            return setByName("KeywordId", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Integer(getVideoId());
        }
        if (pos == 1)
        {
            return getName();
        }
        if (pos == 2)
        {
            return getUrl();
        }
        if (pos == 3)
        {
            return new Integer(getVideoLength());
        }
        if (pos == 4)
        {
            return getSource();
        }
        if (pos == 5)
        {
            return getCategory();
        }
        if (pos == 6)
        {
            return new Integer(getIndexType());
        }
        if (pos == 7)
        {
            return new Integer(getSort());
        }
        if (pos == 8)
        {
            return getCreateDate();
        }
        if (pos == 9)
        {
            return getModifyDate();
        }
        if (pos == 10)
        {
            return getExpiredDate();
        }
        if (pos == 11)
        {
            return getPicturePath();
        }
        if (pos == 12)
        {
            return new Integer(getKeywordId());
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("VideoId", value);
        }
    if (position == 1)
        {
            return setByName("Name", value);
        }
    if (position == 2)
        {
            return setByName("Url", value);
        }
    if (position == 3)
        {
            return setByName("VideoLength", value);
        }
    if (position == 4)
        {
            return setByName("Source", value);
        }
    if (position == 5)
        {
            return setByName("Category", value);
        }
    if (position == 6)
        {
            return setByName("IndexType", value);
        }
    if (position == 7)
        {
            return setByName("Sort", value);
        }
    if (position == 8)
        {
            return setByName("CreateDate", value);
        }
    if (position == 9)
        {
            return setByName("ModifyDate", value);
        }
    if (position == 10)
        {
            return setByName("ExpiredDate", value);
        }
    if (position == 11)
        {
            return setByName("PicturePath", value);
        }
    if (position == 12)
        {
            return setByName("KeywordId", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(KeywordIntervenVideoPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    KeywordIntervenVideoPeer.doInsert((KeywordIntervenVideo) this, con);
                    setNew(false);
                }
                else
                {
                    KeywordIntervenVideoPeer.doUpdate((KeywordIntervenVideo) this, con);
                }
            }

            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key videoId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
        setVideoId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
        setVideoId(Integer.parseInt(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getVideoId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public KeywordIntervenVideo copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public KeywordIntervenVideo copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new KeywordIntervenVideo(), deepcopy);
    }

    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     * @param copyObj the object to fill.
     */
    protected KeywordIntervenVideo copyInto(KeywordIntervenVideo copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected KeywordIntervenVideo copyInto(KeywordIntervenVideo copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setVideoId(videoId);
        copyObj.setName(name);
        copyObj.setUrl(url);
        copyObj.setVideoLength(videoLength);
        copyObj.setSource(source);
        copyObj.setCategory(category);
        copyObj.setIndexType(indexType);
        copyObj.setSort(sort);
        copyObj.setCreateDate(createDate);
        copyObj.setModifyDate(modifyDate);
        copyObj.setExpiredDate(expiredDate);
        copyObj.setPicturePath(picturePath);
        copyObj.setKeywordId(keywordId);

        copyObj.setVideoId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public KeywordIntervenVideoPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return KeywordIntervenVideoPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("KeywordIntervenVideo:\n");
        str.append("VideoId = ")
           .append(getVideoId())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Url = ")
           .append(getUrl())
           .append("\n");
        str.append("VideoLength = ")
           .append(getVideoLength())
           .append("\n");
        str.append("Source = ")
           .append(getSource())
           .append("\n");
        str.append("Category = ")
           .append(getCategory())
           .append("\n");
        str.append("IndexType = ")
           .append(getIndexType())
           .append("\n");
        str.append("Sort = ")
           .append(getSort())
           .append("\n");
        str.append("CreateDate = ")
           .append(getCreateDate())
           .append("\n");
        str.append("ModifyDate = ")
           .append(getModifyDate())
           .append("\n");
        str.append("ExpiredDate = ")
           .append(getExpiredDate())
           .append("\n");
        str.append("PicturePath = ")
           .append(getPicturePath())
           .append("\n");
        str.append("KeywordId = ")
           .append(getKeywordId())
           .append("\n");
        return(str.toString());
    }
}
