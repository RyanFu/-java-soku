package com.youku.soku.manage.torque.map;

import java.util.Date;
import java.math.BigDecimal;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.DatabaseMap;
import org.apache.torque.map.TableMap;
import org.apache.torque.map.ColumnMap;
import org.apache.torque.map.InheritanceMap;

/**
 * 反馈
 *
  *  This class was autogenerated by Torque on:
  *
  * [Mon Jun 13 16:26:37 CST 2011]
  *
  */
public class SokuFeedbackMapBuilder implements MapBuilder
{
    /**
     * The name of this class
     */
    public static final String CLASS_NAME =
        "com.youku.soku.manage.torque.map.SokuFeedbackMapBuilder";

    /**
     * The database map.
     */
    private DatabaseMap dbMap = null;

    /**
     * Tells us if this DatabaseMapBuilder is built so that we
     * don't have to re-build it every time.
     *
     * @return true if this DatabaseMapBuilder is built
     */
    public boolean isBuilt()
    {
        return (dbMap != null);
    }

    /**
     * Gets the databasemap this map builder built.
     *
     * @return the databasemap
     */
    public DatabaseMap getDatabaseMap()
    {
        return this.dbMap;
    }

    /**
     * The doBuild() method builds the DatabaseMap
     *
     * @throws TorqueException
     */
    public synchronized void doBuild() throws TorqueException
    {
    	if ( isBuilt() ) {
    		return;
    	}
        dbMap = Torque.getDatabaseMap("soku");

        dbMap.addTable("soku_feedback");
        TableMap tMap = dbMap.getTable("soku_feedback");
        tMap.setJavaName("SokuFeedback");
        tMap.setOMClass( com.youku.soku.manage.torque.SokuFeedback.class );
        tMap.setPeerClass( com.youku.soku.manage.torque.SokuFeedbackPeer.class );
        tMap.setDescription("反馈");
	    tMap.setPrimaryKeyMethod(TableMap.NATIVE);
        tMap.setPrimaryKeyMethodInfo("soku_feedback");

        ColumnMap cMap = null;


    // ------------- Column: id --------------------
        cMap = new ColumnMap( "id", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(true);
  		cMap.setNotNull(true);
        cMap.setJavaName( "Id" );
        cMap.setAutoIncrement(true);
  		cMap.setProtected(false);
      		cMap.setDescription("Id，自增");
        		cMap.setInheritance("false");
                cMap.setSize( 11 );
   	              cMap.setPosition(1);
          tMap.addColumn(cMap);
    // ------------- Column: keyword --------------------
        cMap = new ColumnMap( "keyword", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "Keyword" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("关键词");
        		cMap.setInheritance("false");
                cMap.setSize( 3000 );
   	              cMap.setPosition(2);
          tMap.addColumn(cMap);
    // ------------- Column: url --------------------
        cMap = new ColumnMap( "url", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(true);
        cMap.setJavaName( "Url" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("来源");
        		cMap.setInheritance("false");
                cMap.setSize( 255 );
   	              cMap.setPosition(3);
          tMap.addColumn(cMap);
    // ------------- Column: state --------------------
        cMap = new ColumnMap( "state", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "State" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("状态");
        		cMap.setInheritance("false");
                cMap.setSize( 4 );
   	              cMap.setPosition(4);
          tMap.addColumn(cMap);
    // ------------- Column: source --------------------
        cMap = new ColumnMap( "source", tMap);
        cMap.setType( new Integer(0) );
        cMap.setTorqueType( "INTEGER" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "Source" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("来源");
        		cMap.setInheritance("false");
                cMap.setSize( 4 );
   	              cMap.setPosition(5);
          tMap.addColumn(cMap);
    // ------------- Column: score --------------------
        cMap = new ColumnMap( "score", tMap);
        cMap.setType( new Double(0) );
        cMap.setTorqueType( "FLOAT" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "Score" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("评分");
        		cMap.setInheritance("false");
                    cMap.setPosition(6);
          tMap.addColumn(cMap);
    // ------------- Column: message --------------------
        cMap = new ColumnMap( "message", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "Message" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("消息");
        		cMap.setInheritance("false");
                cMap.setSize( 5000 );
   	              cMap.setPosition(7);
          tMap.addColumn(cMap);
    // ------------- Column: ip_host --------------------
        cMap = new ColumnMap( "ip_host", tMap);
        cMap.setType( "" );
        cMap.setTorqueType( "VARCHAR" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "IpHost" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("ip");
        		cMap.setInheritance("false");
                cMap.setSize( 255 );
   	              cMap.setPosition(8);
          tMap.addColumn(cMap);
    // ------------- Column: update_time --------------------
        cMap = new ColumnMap( "update_time", tMap);
        cMap.setType( new Date() );
        cMap.setTorqueType( "TIMESTAMP" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "UpdateTime" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("更新时间");
        		cMap.setInheritance("false");
                    cMap.setPosition(9);
          tMap.addColumn(cMap);
    // ------------- Column: create_time --------------------
        cMap = new ColumnMap( "create_time", tMap);
        cMap.setType( new Date() );
        cMap.setTorqueType( "TIMESTAMP" );
        cMap.setUsePrimitive(true);
        cMap.setPrimaryKey(false);
  		cMap.setNotNull(false);
        cMap.setJavaName( "CreateTime" );
        cMap.setAutoIncrement(false);
  		cMap.setProtected(false);
      		cMap.setDescription("创建时间");
        		cMap.setInheritance("false");
                    cMap.setPosition(10);
          tMap.addColumn(cMap);
        tMap.setUseInheritance(false);
    }
}
