package com.youku.soku.manage.torque;


import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Transaction;





/**
 * �qδ�
 *
 * This class was autogenerated by Torque on:
 *
 * [Fri Dec 17 12:02:00 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ShieldWords
 */
public abstract class BaseShieldWords extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1292558520609L;

    /** The Peer class */
    private static final ShieldWordsPeer peer =
        new ShieldWordsPeer();


    /** The value for the id field */
    private int id;

    /** The value for the word field */
    private String word;

    /** The value for the excluding field */
    private String excluding;

    /** The value for the type field */
    private int type;

    /** The value for the youkuEffect field */
    private int youkuEffect;

    /** The value for the othersEffect field */
    private int othersEffect;

    /** The value for the hitRole field */
    private int hitRole;

    /** The value for the fkShieldCategoryId field */
    private int fkShieldCategoryId;

    /** The value for the startTime field */
    private Date startTime;

    /** The value for the expireTime field */
    private Date expireTime;

    /** The value for the remark field */
    private String remark;

    /** The value for the updateTime field */
    private Date updateTime;

    /** The value for the createTime field */
    private Date createTime;

    /** The value for the modifier field */
    private String modifier;


    /**
     * Get the Id
     *
     * @return int
     */
    public int getId()
    {
        return id;
    }


    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(int v) 
    {

        if (this.id != v)
        {
            this.id = v;
            setModified(true);
        }


    }

    /**
     * Get the Word
     *
     * @return String
     */
    public String getWord()
    {
        return word;
    }


    /**
     * Set the value of Word
     *
     * @param v new value
     */
    public void setWord(String v) 
    {

        if (!ObjectUtils.equals(this.word, v))
        {
            this.word = v;
            setModified(true);
        }


    }

    /**
     * Get the Excluding
     *
     * @return String
     */
    public String getExcluding()
    {
        return excluding;
    }


    /**
     * Set the value of Excluding
     *
     * @param v new value
     */
    public void setExcluding(String v) 
    {

        if (!ObjectUtils.equals(this.excluding, v))
        {
            this.excluding = v;
            setModified(true);
        }


    }

    /**
     * Get the Type
     *
     * @return int
     */
    public int getType()
    {
        return type;
    }


    /**
     * Set the value of Type
     *
     * @param v new value
     */
    public void setType(int v) 
    {

        if (this.type != v)
        {
            this.type = v;
            setModified(true);
        }


    }

    /**
     * Get the YoukuEffect
     *
     * @return int
     */
    public int getYoukuEffect()
    {
        return youkuEffect;
    }


    /**
     * Set the value of YoukuEffect
     *
     * @param v new value
     */
    public void setYoukuEffect(int v) 
    {

        if (this.youkuEffect != v)
        {
            this.youkuEffect = v;
            setModified(true);
        }


    }

    /**
     * Get the OthersEffect
     *
     * @return int
     */
    public int getOthersEffect()
    {
        return othersEffect;
    }


    /**
     * Set the value of OthersEffect
     *
     * @param v new value
     */
    public void setOthersEffect(int v) 
    {

        if (this.othersEffect != v)
        {
            this.othersEffect = v;
            setModified(true);
        }


    }

    /**
     * Get the HitRole
     *
     * @return int
     */
    public int getHitRole()
    {
        return hitRole;
    }


    /**
     * Set the value of HitRole
     *
     * @param v new value
     */
    public void setHitRole(int v) 
    {

        if (this.hitRole != v)
        {
            this.hitRole = v;
            setModified(true);
        }


    }

    /**
     * Get the FkShieldCategoryId
     *
     * @return int
     */
    public int getFkShieldCategoryId()
    {
        return fkShieldCategoryId;
    }


    /**
     * Set the value of FkShieldCategoryId
     *
     * @param v new value
     */
    public void setFkShieldCategoryId(int v) 
    {

        if (this.fkShieldCategoryId != v)
        {
            this.fkShieldCategoryId = v;
            setModified(true);
        }


    }

    /**
     * Get the StartTime
     *
     * @return Date
     */
    public Date getStartTime()
    {
        return startTime;
    }


    /**
     * Set the value of StartTime
     *
     * @param v new value
     */
    public void setStartTime(Date v) 
    {

        if (!ObjectUtils.equals(this.startTime, v))
        {
            this.startTime = v;
            setModified(true);
        }


    }

    /**
     * Get the ExpireTime
     *
     * @return Date
     */
    public Date getExpireTime()
    {
        return expireTime;
    }


    /**
     * Set the value of ExpireTime
     *
     * @param v new value
     */
    public void setExpireTime(Date v) 
    {

        if (!ObjectUtils.equals(this.expireTime, v))
        {
            this.expireTime = v;
            setModified(true);
        }


    }

    /**
     * Get the Remark
     *
     * @return String
     */
    public String getRemark()
    {
        return remark;
    }


    /**
     * Set the value of Remark
     *
     * @param v new value
     */
    public void setRemark(String v) 
    {

        if (!ObjectUtils.equals(this.remark, v))
        {
            this.remark = v;
            setModified(true);
        }


    }

    /**
     * Get the UpdateTime
     *
     * @return Date
     */
    public Date getUpdateTime()
    {
        return updateTime;
    }


    /**
     * Set the value of UpdateTime
     *
     * @param v new value
     */
    public void setUpdateTime(Date v) 
    {

        if (!ObjectUtils.equals(this.updateTime, v))
        {
            this.updateTime = v;
            setModified(true);
        }


    }

    /**
     * Get the CreateTime
     *
     * @return Date
     */
    public Date getCreateTime()
    {
        return createTime;
    }


    /**
     * Set the value of CreateTime
     *
     * @param v new value
     */
    public void setCreateTime(Date v) 
    {

        if (!ObjectUtils.equals(this.createTime, v))
        {
            this.createTime = v;
            setModified(true);
        }


    }

    /**
     * Get the Modifier
     *
     * @return String
     */
    public String getModifier()
    {
        return modifier;
    }


    /**
     * Set the value of Modifier
     *
     * @param v new value
     */
    public void setModifier(String v) 
    {

        if (!ObjectUtils.equals(this.modifier, v))
        {
            this.modifier = v;
            setModified(true);
        }


    }

       
        
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
            fieldNames.add("Id");
            fieldNames.add("Word");
            fieldNames.add("Excluding");
            fieldNames.add("Type");
            fieldNames.add("YoukuEffect");
            fieldNames.add("OthersEffect");
            fieldNames.add("HitRole");
            fieldNames.add("FkShieldCategoryId");
            fieldNames.add("StartTime");
            fieldNames.add("ExpireTime");
            fieldNames.add("Remark");
            fieldNames.add("UpdateTime");
            fieldNames.add("CreateTime");
            fieldNames.add("Modifier");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Id"))
        {
            return new Integer(getId());
        }
        if (name.equals("Word"))
        {
            return getWord();
        }
        if (name.equals("Excluding"))
        {
            return getExcluding();
        }
        if (name.equals("Type"))
        {
            return new Integer(getType());
        }
        if (name.equals("YoukuEffect"))
        {
            return new Integer(getYoukuEffect());
        }
        if (name.equals("OthersEffect"))
        {
            return new Integer(getOthersEffect());
        }
        if (name.equals("HitRole"))
        {
            return new Integer(getHitRole());
        }
        if (name.equals("FkShieldCategoryId"))
        {
            return new Integer(getFkShieldCategoryId());
        }
        if (name.equals("StartTime"))
        {
            return getStartTime();
        }
        if (name.equals("ExpireTime"))
        {
            return getExpireTime();
        }
        if (name.equals("Remark"))
        {
            return getRemark();
        }
        if (name.equals("UpdateTime"))
        {
            return getUpdateTime();
        }
        if (name.equals("CreateTime"))
        {
            return getCreateTime();
        }
        if (name.equals("Modifier"))
        {
            return getModifier();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Id"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Word"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setWord((String) value);
            return true;
        }
        if (name.equals("Excluding"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setExcluding((String) value);
            return true;
        }
        if (name.equals("Type"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setType(((Integer) value).intValue());
            return true;
        }
        if (name.equals("YoukuEffect"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setYoukuEffect(((Integer) value).intValue());
            return true;
        }
        if (name.equals("OthersEffect"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setOthersEffect(((Integer) value).intValue());
            return true;
        }
        if (name.equals("HitRole"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setHitRole(((Integer) value).intValue());
            return true;
        }
        if (name.equals("FkShieldCategoryId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setFkShieldCategoryId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("StartTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setStartTime((Date) value);
            return true;
        }
        if (name.equals("ExpireTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setExpireTime((Date) value);
            return true;
        }
        if (name.equals("Remark"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setRemark((String) value);
            return true;
        }
        if (name.equals("UpdateTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setUpdateTime((Date) value);
            return true;
        }
        if (name.equals("CreateTime"))
        {
            // Object fields can be null
            if (value != null && ! Date.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCreateTime((Date) value);
            return true;
        }
        if (name.equals("Modifier"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setModifier((String) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(ShieldWordsPeer.ID))
        {
            return new Integer(getId());
        }
        if (name.equals(ShieldWordsPeer.WORD))
        {
            return getWord();
        }
        if (name.equals(ShieldWordsPeer.EXCLUDING))
        {
            return getExcluding();
        }
        if (name.equals(ShieldWordsPeer.TYPE))
        {
            return new Integer(getType());
        }
        if (name.equals(ShieldWordsPeer.YOUKU_EFFECT))
        {
            return new Integer(getYoukuEffect());
        }
        if (name.equals(ShieldWordsPeer.OTHERS_EFFECT))
        {
            return new Integer(getOthersEffect());
        }
        if (name.equals(ShieldWordsPeer.HIT_ROLE))
        {
            return new Integer(getHitRole());
        }
        if (name.equals(ShieldWordsPeer.FK_SHIELD_CATEGORY_ID))
        {
            return new Integer(getFkShieldCategoryId());
        }
        if (name.equals(ShieldWordsPeer.START_TIME))
        {
            return getStartTime();
        }
        if (name.equals(ShieldWordsPeer.EXPIRE_TIME))
        {
            return getExpireTime();
        }
        if (name.equals(ShieldWordsPeer.REMARK))
        {
            return getRemark();
        }
        if (name.equals(ShieldWordsPeer.UPDATE_TIME))
        {
            return getUpdateTime();
        }
        if (name.equals(ShieldWordsPeer.CREATE_TIME))
        {
            return getCreateTime();
        }
        if (name.equals(ShieldWordsPeer.MODIFIER))
        {
            return getModifier();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (ShieldWordsPeer.ID.equals(name))
        {
            return setByName("Id", value);
        }
      if (ShieldWordsPeer.WORD.equals(name))
        {
            return setByName("Word", value);
        }
      if (ShieldWordsPeer.EXCLUDING.equals(name))
        {
            return setByName("Excluding", value);
        }
      if (ShieldWordsPeer.TYPE.equals(name))
        {
            return setByName("Type", value);
        }
      if (ShieldWordsPeer.YOUKU_EFFECT.equals(name))
        {
            return setByName("YoukuEffect", value);
        }
      if (ShieldWordsPeer.OTHERS_EFFECT.equals(name))
        {
            return setByName("OthersEffect", value);
        }
      if (ShieldWordsPeer.HIT_ROLE.equals(name))
        {
            return setByName("HitRole", value);
        }
      if (ShieldWordsPeer.FK_SHIELD_CATEGORY_ID.equals(name))
        {
            return setByName("FkShieldCategoryId", value);
        }
      if (ShieldWordsPeer.START_TIME.equals(name))
        {
            return setByName("StartTime", value);
        }
      if (ShieldWordsPeer.EXPIRE_TIME.equals(name))
        {
            return setByName("ExpireTime", value);
        }
      if (ShieldWordsPeer.REMARK.equals(name))
        {
            return setByName("Remark", value);
        }
      if (ShieldWordsPeer.UPDATE_TIME.equals(name))
        {
            return setByName("UpdateTime", value);
        }
      if (ShieldWordsPeer.CREATE_TIME.equals(name))
        {
            return setByName("CreateTime", value);
        }
      if (ShieldWordsPeer.MODIFIER.equals(name))
        {
            return setByName("Modifier", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Integer(getId());
        }
        if (pos == 1)
        {
            return getWord();
        }
        if (pos == 2)
        {
            return getExcluding();
        }
        if (pos == 3)
        {
            return new Integer(getType());
        }
        if (pos == 4)
        {
            return new Integer(getYoukuEffect());
        }
        if (pos == 5)
        {
            return new Integer(getOthersEffect());
        }
        if (pos == 6)
        {
            return new Integer(getHitRole());
        }
        if (pos == 7)
        {
            return new Integer(getFkShieldCategoryId());
        }
        if (pos == 8)
        {
            return getStartTime();
        }
        if (pos == 9)
        {
            return getExpireTime();
        }
        if (pos == 10)
        {
            return getRemark();
        }
        if (pos == 11)
        {
            return getUpdateTime();
        }
        if (pos == 12)
        {
            return getCreateTime();
        }
        if (pos == 13)
        {
            return getModifier();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occures with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("Id", value);
        }
    if (position == 1)
        {
            return setByName("Word", value);
        }
    if (position == 2)
        {
            return setByName("Excluding", value);
        }
    if (position == 3)
        {
            return setByName("Type", value);
        }
    if (position == 4)
        {
            return setByName("YoukuEffect", value);
        }
    if (position == 5)
        {
            return setByName("OthersEffect", value);
        }
    if (position == 6)
        {
            return setByName("HitRole", value);
        }
    if (position == 7)
        {
            return setByName("FkShieldCategoryId", value);
        }
    if (position == 8)
        {
            return setByName("StartTime", value);
        }
    if (position == 9)
        {
            return setByName("ExpireTime", value);
        }
    if (position == 10)
        {
            return setByName("Remark", value);
        }
    if (position == 11)
        {
            return setByName("UpdateTime", value);
        }
    if (position == 12)
        {
            return setByName("CreateTime", value);
        }
    if (position == 13)
        {
            return setByName("Modifier", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(ShieldWordsPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ShieldWordsPeer.doInsert((ShieldWords) this, con);
                    setNew(false);
                }
                else
                {
                    ShieldWordsPeer.doUpdate((ShieldWords) this, con);
                }
            }

            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
        setId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
        setId(Integer.parseInt(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public ShieldWords copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public ShieldWords copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new ShieldWords(), deepcopy);
    }

    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     * @param copyObj the object to fill.
     */
    protected ShieldWords copyInto(ShieldWords copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected ShieldWords copyInto(ShieldWords copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setId(id);
        copyObj.setWord(word);
        copyObj.setExcluding(excluding);
        copyObj.setType(type);
        copyObj.setYoukuEffect(youkuEffect);
        copyObj.setOthersEffect(othersEffect);
        copyObj.setHitRole(hitRole);
        copyObj.setFkShieldCategoryId(fkShieldCategoryId);
        copyObj.setStartTime(startTime);
        copyObj.setExpireTime(expireTime);
        copyObj.setRemark(remark);
        copyObj.setUpdateTime(updateTime);
        copyObj.setCreateTime(createTime);
        copyObj.setModifier(modifier);

        copyObj.setId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ShieldWordsPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return ShieldWordsPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("ShieldWords:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("Word = ")
           .append(getWord())
           .append("\n");
        str.append("Excluding = ")
           .append(getExcluding())
           .append("\n");
        str.append("Type = ")
           .append(getType())
           .append("\n");
        str.append("YoukuEffect = ")
           .append(getYoukuEffect())
           .append("\n");
        str.append("OthersEffect = ")
           .append(getOthersEffect())
           .append("\n");
        str.append("HitRole = ")
           .append(getHitRole())
           .append("\n");
        str.append("FkShieldCategoryId = ")
           .append(getFkShieldCategoryId())
           .append("\n");
        str.append("StartTime = ")
           .append(getStartTime())
           .append("\n");
        str.append("ExpireTime = ")
           .append(getExpireTime())
           .append("\n");
        str.append("Remark = ")
           .append(getRemark())
           .append("\n");
        str.append("UpdateTime = ")
           .append(getUpdateTime())
           .append("\n");
        str.append("CreateTime = ")
           .append(getCreateTime())
           .append("\n");
        str.append("Modifier = ")
           .append(getModifier())
           .append("\n");
        return(str.toString());
    }
}
